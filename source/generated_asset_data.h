#if !defined(GENERATED_ASSET_DATA_H) && defined(SNAIL_JUMPY_USE_PROCESSED_ASSETS)
#define GENERATED_ASSET_DATA_H
internal inline void
InitializeProcessedAssets(asset_system *Assets, void *Data, u32 DataSize){
ta_system *TA = &TextAdventure;
memory_arena *Memory = &Assets->Memory;
{
TA->Theme.BasicFont = AssetID(font_basic); 
TA->Theme.TitleFont = AssetID(font_basic_bold); 
TA->Theme.BackgroundColor = MakeColor(0.039216f, 0.050980f, 0.290196f, 1.000000f); 
TA->Theme.CursorColor = MakeColor(0.949020f, 0.949020f, 0.949020f, 1.000000f); 
TA->Theme.SelectionColor = MakeColor(0.137255f, 0.172549f, 0.549020f, 1.000000f); 
TA->Theme.BasicFancy = MakeFancyFormat(MakeColor(0.95f, 0.95f, 0.95f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
TA->Theme.RoomTitleFancy = MakeFancyFormat(MakeColor(1.00f, 0.41f, 0.41f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 1.00f, 6.28f, 3.14f, 0.00f, 0.00f, 0.00f);
TA->Theme.ItemFancy = MakeFancyFormat(MakeColor(0.14f, 0.89f, 0.89f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
TA->Theme.RoomFancy = MakeFancyFormat(MakeColor(1.00f, 0.41f, 0.41f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
TA->Theme.DirectionFancy = MakeFancyFormat(MakeColor(0.37f, 0.92f, 0.51f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
TA->Theme.MiscFancy = MakeFancyFormat(MakeColor(0.96f, 0.84f, 0.34f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
TA->Theme.MoodFancy = MakeFancyFormat(MakeColor(0.35f, 0.67f, 0.54f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
TA->Theme.ResponseFancies[0] = MakeFancyFormat(MakeColor(0.56f, 0.39f, 1.00f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
TA->Theme.ResponseFancies[1] = MakeFancyFormat(MakeColor(0.90f, 0.31f, 0.80f, 1.00f), MakeColor(0.56f, 0.39f, 1.00f, 1.00f), 0.00f, 0.00f, 0.00f, 3.14f, 0.31f, 0.00f);
TA->Theme.DescriptionFancies[0] = TA->Theme.BasicFancy;
TA->Theme.DescriptionFancies[1] = TA->Theme.DirectionFancy;
TA->Theme.DescriptionFancies[2] = TA->Theme.RoomFancy;
TA->Theme.DescriptionFancies[3] = TA->Theme.ItemFancy;
TA->Theme.DescriptionFancies[4] = TA->Theme.MiscFancy;
TA->Theme.DescriptionFancies[5] = TA->Theme.MoodFancy;
}
Assets->SoundEffects[1].Sound.ChannelCount = 2;
Assets->SoundEffects[1].Sound.SampleCount  = 2013;
Assets->SoundEffects[1].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[1].VolumeMultiplier   = 1.000000f;
Assert(4 < DataSize);
Assets->SoundEffects[1].Sound.Samples = (s16 *)((u8 *)Data+4);
Assets->SoundEffects[2].Sound.ChannelCount = 2;
Assets->SoundEffects[2].Sound.SampleCount  = 26368;
Assets->SoundEffects[2].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[2].VolumeMultiplier   = 1.000000f;
Assert(8056 < DataSize);
Assets->SoundEffects[2].Sound.Samples = (s16 *)((u8 *)Data+8056);
Assets->SoundEffects[3].Sound.ChannelCount = 2;
Assets->SoundEffects[3].Sound.SampleCount  = 2913408;
Assets->SoundEffects[3].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[3].VolumeMultiplier   = 1.000000f;
Assert(113528 < DataSize);
Assets->SoundEffects[3].Sound.Samples = (s16 *)((u8 *)Data+113528);
Assets->SoundEffects[4].Sound.ChannelCount = 2;
Assets->SoundEffects[4].Sound.SampleCount  = 64000;
Assets->SoundEffects[4].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[4].VolumeMultiplier   = 1.000000f;
Assert(11767160 < DataSize);
Assets->SoundEffects[4].Sound.Samples = (s16 *)((u8 *)Data+11767160);
Assets->SoundEffects[5].Sound.ChannelCount = 2;
Assets->SoundEffects[5].Sound.SampleCount  = 38790;
Assets->SoundEffects[5].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[5].VolumeMultiplier   = 1.000000f;
Assert(12023160 < DataSize);
Assets->SoundEffects[5].Sound.Samples = (s16 *)((u8 *)Data+12023160);
Assets->SoundEffects[6].Sound.ChannelCount = 2;
Assets->SoundEffects[6].Sound.SampleCount  = 35296;
Assets->SoundEffects[6].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[6].VolumeMultiplier   = 1.000000f;
Assert(12178320 < DataSize);
Assets->SoundEffects[6].Sound.Samples = (s16 *)((u8 *)Data+12178320);
Assets->SoundEffects[7].Sound.ChannelCount = 2;
Assets->SoundEffects[7].Sound.SampleCount  = 33075;
Assets->SoundEffects[7].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[7].VolumeMultiplier   = 1.000000f;
Assert(12319504 < DataSize);
Assets->SoundEffects[7].Sound.Samples = (s16 *)((u8 *)Data+12319504);
Assets->SoundEffects[8].Sound.ChannelCount = 2;
Assets->SoundEffects[8].Sound.SampleCount  = 43715;
Assets->SoundEffects[8].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[8].VolumeMultiplier   = 1.000000f;
Assert(12451804 < DataSize);
Assets->SoundEffects[8].Sound.Samples = (s16 *)((u8 *)Data+12451804);
Assets->SoundEffects[9].Sound.ChannelCount = 2;
Assets->SoundEffects[9].Sound.SampleCount  = 358272;
Assets->SoundEffects[9].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[9].VolumeMultiplier   = 1.000000f;
Assert(12626664 < DataSize);
Assets->SoundEffects[9].Sound.Samples = (s16 *)((u8 *)Data+12626664);
Assets->SoundEffects[10].Sound.ChannelCount = 2;
Assets->SoundEffects[10].Sound.SampleCount  = 37948;
Assets->SoundEffects[10].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[10].VolumeMultiplier   = 1.000000f;
Assert(14059752 < DataSize);
Assets->SoundEffects[10].Sound.Samples = (s16 *)((u8 *)Data+14059752);
Assets->SoundEffects[11].Sound.ChannelCount = 2;
Assets->SoundEffects[11].Sound.SampleCount  = 38656;
Assets->SoundEffects[11].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[11].VolumeMultiplier   = 1.000000f;
Assert(14211544 < DataSize);
Assets->SoundEffects[11].Sound.Samples = (s16 *)((u8 *)Data+14211544);
Assets->SoundEffects[12].Sound.ChannelCount = 2;
Assets->SoundEffects[12].Sound.SampleCount  = 28160;
Assets->SoundEffects[12].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[12].VolumeMultiplier   = 1.000000f;
Assert(14366168 < DataSize);
Assets->SoundEffects[12].Sound.Samples = (s16 *)((u8 *)Data+14366168);
{
Assets->Fonts[1].Size    = V2S(64, 72);
Assets->Fonts[1].Height  = 7.000000;
Assets->Fonts[1].Descent = 2.000000;
Assert(14478808 < DataSize);
CopyMemory(Assets->Fonts[1].Table, ((u8 *)Data+14478808), sizeof(Assets->Fonts[1].Table));
Assert(14480344 < DataSize);
u8 *Pixels = ((u8 *)Data+14480344);
Assets->Fonts[1].Texture = MakeTexture();
TextureUpload(Assets->Fonts[1].Texture, Pixels, 64, 72, 4);
}
{
Assets->Fonts[2].Size    = V2S(50, 49);
Assets->Fonts[2].Height  = 5.000000;
Assets->Fonts[2].Descent = 0.000000;
Assert(14498776 < DataSize);
CopyMemory(Assets->Fonts[2].Table, ((u8 *)Data+14498776), sizeof(Assets->Fonts[2].Table));
Assert(14500312 < DataSize);
u8 *Pixels = ((u8 *)Data+14500312);
Assets->Fonts[2].Texture = MakeTexture();
TextureUpload(Assets->Fonts[2].Texture, Pixels, 50, 49, 4);
}
{
Assets->Fonts[3].Size    = V2S(50, 49);
Assets->Fonts[3].Height  = 5.000000;
Assets->Fonts[3].Descent = 0.000000;
Assert(14510112 < DataSize);
CopyMemory(Assets->Fonts[3].Table, ((u8 *)Data+14510112), sizeof(Assets->Fonts[3].Table));
Assert(14511648 < DataSize);
u8 *Pixels = ((u8 *)Data+14511648);
Assets->Fonts[3].Texture = MakeTexture();
TextureUpload(Assets->Fonts[3].Texture, Pixels, 50, 49, 4);
}
{
Assets->Fonts[4].Size    = V2S(45, 27);
Assets->Fonts[4].Height  = 5.000000;
Assets->Fonts[4].Descent = 2.000000;
Assert(14521448 < DataSize);
CopyMemory(Assets->Fonts[4].Table, ((u8 *)Data+14521448), sizeof(Assets->Fonts[4].Table));
Assert(14522984 < DataSize);
u8 *Pixels = ((u8 *)Data+14522984);
Assets->Fonts[4].Texture = MakeTexture();
TextureUpload(Assets->Fonts[4].Texture, Pixels, 45, 27, 4);
}
{
Assets->Fonts[5].Size    = V2S(64, 85);
Assets->Fonts[5].Height  = 15.000000;
Assets->Fonts[5].Descent = 5.000000;
Assert(14527844 < DataSize);
CopyMemory(Assets->Fonts[5].Table, ((u8 *)Data+14527844), sizeof(Assets->Fonts[5].Table));
Assert(14529380 < DataSize);
u8 *Pixels = ((u8 *)Data+14529380);
Assets->Fonts[5].Texture = MakeTexture();
TextureUpload(Assets->Fonts[5].Texture, Pixels, 64, 85, 4);
}
TA->StartRoomID = MakeTAID(1873743589436);
TA->StartRoomName = "Bakery";
TA->RoomTable.BucketsUsed = 36;
{
TA->RoomTable.Keys[0] = MakeTAID(1873743591240);
TA->RoomTable.Hashes[0] = 1873743591240;
ta_room *Room = &TA->RoomTable.Values[0];
Room->Name = "Inn room 2";
Room->Area = MakeTAID(1873743589808);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14551140 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14551140);
Assert(14551182 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14551182);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743591216);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[1] = MakeTAID(1873743589836);
TA->RoomTable.Hashes[1] = 1873743589836;
ta_room *Room = &TA->RoomTable.Values[1];
Room->Name = "Plaza SE";
Room->Area = MakeTAID(1873743589836);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14551187 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14551187);
Assert(14551354 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14551354);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743590460);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743590444);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743590432);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743589848);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[2] = MakeTAID(1873743589908);
TA->RoomTable.Hashes[2] = 1873743589908;
ta_room *Room = &TA->RoomTable.Values[2];
Room->Name = "Thorn lane W";
Room->Area = MakeTAID(1873743589908);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14551547 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14551547);
Assert(14551564 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14551564);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743590528);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743589880);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743590548);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743590568);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[3] = MakeTAID(1873743591456);
TA->RoomTable.Hashes[3] = 1873743591456;
ta_room *Room = &TA->RoomTable.Values[3];
Room->Name = "Cathedral altar";
Room->Area = MakeTAID(1873743589760);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14551569 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14551569);
Assert(14551651 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14551651);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743591472);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743591440);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743591524);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[4] = MakeTAID(1873743591496);
TA->RoomTable.Hashes[4] = 1873743591496;
ta_room *Room = &TA->RoomTable.Values[4];
Room->Name = "Cathedral spiral staircase";
Room->Area = MakeTAID(1873743589748);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14551796 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14551796);
Assert(14552055 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14552055);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(1873743590400);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743591440);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)1873743591572);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)8, (asset_tag_id)11, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[5] = MakeTAID(1873743590488);
TA->RoomTable.Hashes[5] = 1873743590488;
ta_room *Room = &TA->RoomTable.Values[5];
Room->Name = "Inn front";
Room->Area = MakeTAID(1873743589808);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14552182 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14552182);
Assert(14552359 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14552359);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743591204);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743589848);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743589892);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743589880);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[6] = MakeTAID(1873743591204);
TA->RoomTable.Hashes[6] = 1873743591204;
ta_room *Room = &TA->RoomTable.Values[6];
Room->Name = "Inn lobby";
Room->Area = MakeTAID(1873743589808);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14552364 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14552364);
Assert(14552620 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14552620);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(1873743591064);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743590488);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)1873743591216);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[7] = MakeTAID(1873743589872);
TA->RoomTable.Hashes[7] = 1873743589872;
ta_room *Room = &TA->RoomTable.Values[7];
Room->Name = "Shop";
Room->Area = MakeTAID(1873743589872);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 3);
Assert(14552625 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14552625);
Assert(14552817 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14552817);
Assert(14552900 < DataSize);
Room->Descriptions[2] = (ta_string *)((u8 *)Data+14552900);
Room->Items = MakeFullArray<ta_id>(Memory, 3);
Room->Items[0] = MakeTAID(1873743589444);
Room->Items[1] = MakeTAID(1873743589944);
Room->Items[2] = MakeTAID(1873743589980);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743590432);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[8] = MakeTAID(1873743591572);
TA->RoomTable.Hashes[8] = 1873743591572;
ta_room *Room = &TA->RoomTable.Values[8];
Room->Name = "Bell tower programming room";
Room->Area = MakeTAID(1873743589748);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14552934 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14552934);
Assert(14552939 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14552939);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743591600);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)1873743591624);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)1873743591496);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[9] = MakeTAID(1873743591280);
TA->RoomTable.Hashes[9] = 1873743591280;
ta_room *Room = &TA->RoomTable.Values[9];
Room->Name = "Bar billiard room";
Room->Area = MakeTAID(1873743589744);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14553019 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14553019);
Assert(14553041 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14553041);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)1873743589744);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[10] = MakeTAID(1873743591600);
TA->RoomTable.Hashes[10] = 1873743591600;
ta_room *Room = &TA->RoomTable.Values[10];
Room->Name = "Bell tower storage room";
Room->Area = MakeTAID(1873743589748);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14553046 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14553046);
Assert(14553051 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14553051);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743591572);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[11] = MakeTAID(1873743589880);
TA->RoomTable.Hashes[11] = 1873743589880;
ta_room *Room = &TA->RoomTable.Values[11];
Room->Name = "Thorn lane";
Room->Area = MakeTAID(1873743589880);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14553137 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14553137);
Assert(14553152 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14553152);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743589788);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743589892);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743590512);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743589908);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[12] = MakeTAID(1873743591252);
TA->RoomTable.Hashes[12] = 1873743591252;
ta_room *Room = &TA->RoomTable.Values[12];
Room->Name = "Inn room 3";
Room->Area = MakeTAID(1873743589808);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14553157 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14553157);
Assert(14553199 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14553199);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(1873743591188);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743591216);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[13] = MakeTAID(1873743589848);
TA->RoomTable.Hashes[13] = 1873743589848;
ta_room *Room = &TA->RoomTable.Values[13];
Room->Name = "Plaza SW";
Room->Area = MakeTAID(1873743589848);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14553204 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14553204);
Assert(14553217 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14553217);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743589824);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743589836);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743590476);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743589892);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[14] = MakeTAID(1873743591648);
TA->RoomTable.Hashes[14] = 1873743591648;
ta_room *Room = &TA->RoomTable.Values[14];
Room->Name = "Bell tower belfrey";
Room->Area = MakeTAID(1873743589748);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14553344 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14553344);
Assert(14553349 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14553349);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)1873743591668);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)1873743591624);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[15] = MakeTAID(1873743591216);
TA->RoomTable.Hashes[15] = 1873743591216;
ta_room *Room = &TA->RoomTable.Values[15];
Room->Name = "Inn hallway";
Room->Area = MakeTAID(1873743589808);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14553354 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14553354);
Assert(14553441 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14553441);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)1873743591204);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[16] = MakeTAID(1873743591040);
TA->RoomTable.Hashes[16] = 1873743591040;
ta_room *Room = &TA->RoomTable.Values[16];
Room->Name = "Plant shop greenhouse";
Room->Area = MakeTAID(1873743589812);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14553446 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14553446);
Assert(14553461 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14553461);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743589812);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[17] = MakeTAID(1873743589744);
TA->RoomTable.Hashes[17] = 1873743589744;
ta_room *Room = &TA->RoomTable.Values[17];
Room->Name = "Bar";
Room->Area = MakeTAID(1873743589744);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14553554 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14553554);
Assert(14553565 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14553565);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743590476);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)1873743591280);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)1873743591300);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[18] = MakeTAID(1873743589812);
TA->RoomTable.Hashes[18] = 1873743589812;
ta_room *Room = &TA->RoomTable.Values[18];
Room->Name = "Plant shop";
Room->Area = MakeTAID(1873743589812);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 3);
Assert(14553636 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14553636);
Assert(14554015 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14554015);
Assert(14554135 < DataSize);
Room->Descriptions[2] = (ta_string *)((u8 *)Data+14554135);
Room->Items = MakeFullArray<ta_id>(Memory, 8);
Room->Items[0] = MakeTAID(1873743590596);
Room->Items[1] = MakeTAID(1873743590636);
Room->Items[2] = MakeTAID(1873743590688);
Room->Items[3] = MakeTAID(1873743591004);
Room->Items[4] = MakeTAID(1873743590916);
Room->Items[5] = MakeTAID(1873743590976);
Room->Items[6] = MakeTAID(1873743590992);
Room->Items[7] = MakeTAID(1873743590876);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743591040);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743590576);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[19] = MakeTAID(1873743591472);
TA->RoomTable.Hashes[19] = 1873743591472;
ta_room *Room = &TA->RoomTable.Values[19];
Room->Name = "Cathedral organ console";
Room->Area = MakeTAID(1873743589760);
Room->Tag = MakeAssetTag((asset_tag_id)7, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 3);
Assert(14554186 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14554186);
Assert(14554376 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14554376);
Assert(14554452 < DataSize);
Room->Descriptions[2] = (ta_string *)((u8 *)Data+14554452);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(1873743591312);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743591544);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)7, (asset_tag_id)11, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)1873743591440);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743591456);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[20] = MakeTAID(1873743589892);
TA->RoomTable.Hashes[20] = 1873743589892;
ta_room *Room = &TA->RoomTable.Values[20];
Room->Name = "Thorn lane E";
Room->Area = MakeTAID(1873743589892);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14554610 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14554610);
Assert(14554627 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14554627);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743590488);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743589848);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743590500);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743589880);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[21] = MakeTAID(1873743591440);
TA->RoomTable.Hashes[21] = 1873743591440;
ta_room *Room = &TA->RoomTable.Values[21];
Room->Name = "Cathedral nave";
Room->Area = MakeTAID(1873743589760);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14554684 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14554684);
Assert(14554947 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14554947);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743591456);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)1873743591472);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743590460);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743591496);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[22] = MakeTAID(1873743590432);
TA->RoomTable.Hashes[22] = 1873743590432;
ta_room *Room = &TA->RoomTable.Values[22];
Room->Name = "Shop front";
Room->Area = MakeTAID(1873743589872);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14555186 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14555186);
Assert(14555349 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14555349);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743589836);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743590444);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743589872);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743590476);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[23] = MakeTAID(1873743590576);
TA->RoomTable.Hashes[23] = 1873743590576;
ta_room *Room = &TA->RoomTable.Values[23];
Room->Name = "Plant shop front";
Room->Area = MakeTAID(1873743589812);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14555512 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14555512);
Assert(14555936 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14555936);
Room->Items = MakeFullArray<ta_id>(Memory, 3);
Room->Items[0] = MakeTAID(1873743590720);
Room->Items[1] = MakeTAID(1873743590760);
Room->Items[2] = MakeTAID(1873743590812);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743589812);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743589788);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[24] = MakeTAID(1873743589824);
TA->RoomTable.Hashes[24] = 1873743589824;
ta_room *Room = &TA->RoomTable.Values[24];
Room->Name = "Plaza NW";
Room->Area = MakeTAID(1873743589824);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14556028 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14556028);
Assert(14556041 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14556041);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743589848);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[25] = MakeTAID(1873743591300);
TA->RoomTable.Hashes[25] = 1873743591300;
ta_room *Room = &TA->RoomTable.Values[25];
Room->Name = "Bar cellar";
Room->Area = MakeTAID(1873743589744);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14556108 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14556108);
Assert(14556123 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14556123);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)1873743589744);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[26] = MakeTAID(1873743591624);
TA->RoomTable.Hashes[26] = 1873743591624;
ta_room *Room = &TA->RoomTable.Values[26];
Room->Name = "Bell tower playing room";
Room->Area = MakeTAID(1873743589748);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14556128 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14556128);
Assert(14556133 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14556133);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)1873743591648);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)1873743591572);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[27] = MakeTAID(1873743589788);
TA->RoomTable.Hashes[27] = 1873743589788;
ta_room *Room = &TA->RoomTable.Values[27];
Room->Name = "Dark alley";
Room->Area = MakeTAID(1873743589788);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14556138 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14556138);
Assert(14556413 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14556413);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743590576);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743589880);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[28] = MakeTAID(1873743590476);
TA->RoomTable.Hashes[28] = 1873743590476;
ta_room *Room = &TA->RoomTable.Values[28];
Room->Name = "Bar front";
Room->Area = MakeTAID(1873743589744);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14556549 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14556549);
Assert(14556576 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14556576);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743589848);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743590432);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743589744);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743589892);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[29] = MakeTAID(1873743591544);
TA->RoomTable.Hashes[29] = 1873743591544;
ta_room *Room = &TA->RoomTable.Values[29];
Room->Name = "Cathedral maintenance room";
Room->Area = MakeTAID(1873743589760);
Room->Tag = MakeAssetTag((asset_tag_id)7, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 3);
Assert(14556666 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14556666);
Assert(14557035 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14557035);
Assert(14557062 < DataSize);
Room->Descriptions[2] = (ta_string *)((u8 *)Data+14557062);
Room->Items = MakeFullArray<ta_id>(Memory, 2);
Room->Items[0] = MakeTAID(1873743591380);
Room->Items[1] = MakeTAID(1873743591412);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743591472);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[30] = MakeTAID(1873743591228);
TA->RoomTable.Hashes[30] = 1873743591228;
ta_room *Room = &TA->RoomTable.Values[30];
Room->Name = "Inn room 1";
Room->Area = MakeTAID(1873743589808);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14557144 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14557144);
Assert(14557384 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14557384);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(1873743591156);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743591216);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[31] = MakeTAID(1873743590460);
TA->RoomTable.Hashes[31] = 1873743590460;
ta_room *Room = &TA->RoomTable.Values[31];
Room->Name = "Cathedral front";
Room->Area = MakeTAID(1873743589760);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14557389 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14557389);
Assert(14557673 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14557673);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)1873743591440);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743589836);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[32] = MakeTAID(1873743591524);
TA->RoomTable.Hashes[32] = 1873743591524;
ta_room *Room = &TA->RoomTable.Values[32];
Room->Name = "Cathedral vestry";
Room->Area = MakeTAID(1873743589760);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14557775 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14557775);
Assert(14558217 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14558217);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(1873743590352);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743591456);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)1873743591440);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[33] = MakeTAID(1873743590444);
TA->RoomTable.Hashes[33] = 1873743590444;
ta_room *Room = &TA->RoomTable.Values[33];
Room->Name = "Bakery front";
Room->Area = MakeTAID(1873743589436);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14558324 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14558324);
Assert(14558543 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14558543);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743589436);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743589836);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[34] = MakeTAID(1873743591668);
TA->RoomTable.Hashes[34] = 1873743591668;
ta_room *Room = &TA->RoomTable.Values[34];
Room->Name = "Bell tower lookout";
Room->Area = MakeTAID(1873743589748);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14558662 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14558662);
Assert(14558963 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14558963);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)1873743591648);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[35] = MakeTAID(1873743589436);
TA->RoomTable.Hashes[35] = 1873743589436;
ta_room *Room = &TA->RoomTable.Values[35];
Room->Name = "Bakery";
Room->Area = MakeTAID(1873743589436);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Descriptions = MakeFullArray<ta_string *>(Memory, 3);
Assert(14558968 < DataSize);
Room->Descriptions[0] = (ta_string *)((u8 *)Data+14558968);
Assert(14559136 < DataSize);
Room->Descriptions[1] = (ta_string *)((u8 *)Data+14559136);
Assert(14559251 < DataSize);
Room->Descriptions[2] = (ta_string *)((u8 *)Data+14559251);
Room->Items = MakeFullArray<ta_id>(Memory, 5);
Room->Items[0] = MakeTAID(1873743590012);
Room->Items[1] = MakeTAID(1873743590072);
Room->Items[2] = MakeTAID(1873743590132);
Room->Items[3] = MakeTAID(1873743590192);
Room->Items[4] = MakeTAID(1873743590252);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)1873743591264);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)1873743590444);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
TA->ItemNameTable = MakeHashTable<const char *, ta_id>(Memory, ITEM_TABLE_SIZE);
TA->ItemTable.BucketsUsed = 29;
{
HashTableInsert(&TA->ItemNameTable, "room 3 window", MakeTAID(1873743591188));
TA->ItemTable.Keys[0] = MakeTAID(1873743591188);
TA->ItemTable.Hashes[0] = 1873743591188;
ta_item *Item = &TA->ItemTable.Values[0];
Item->Name = "room 3 window";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "window";
Item->Aliases[1] = "windows";
Item->Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14559307 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14559307);
}
{
HashTableInsert(&TA->ItemNameTable, "rusty doorknob", MakeTAID(1873743590812));
TA->ItemTable.Keys[1] = MakeTAID(1873743590812);
TA->ItemTable.Hashes[1] = 1873743590812;
ta_item *Item = &TA->ItemTable.Values[1];
Item->Name = "rusty doorknob";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 4);
Item->Aliases[0] = "doorknob";
Item->Aliases[1] = "doorknobs";
Item->Aliases[2] = "knob";
Item->Aliases[3] = "knobs";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "rusty";
Item->Adjectives[1] = "door";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14559549 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14559549);
}
{
HashTableInsert(&TA->ItemNameTable, "garden shovel", MakeTAID(1873743590636));
TA->ItemTable.Keys[2] = MakeTAID(1873743590636);
TA->ItemTable.Hashes[2] = 1873743590636;
ta_item *Item = &TA->ItemTable.Values[2];
Item->Name = "garden shovel";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 5;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "shovel";
Item->Aliases[1] = "shovels";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "garden";
Item->Adjectives[1] = "gardening";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14559613 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14559613);
}
{
HashTableInsert(&TA->ItemNameTable, "an umbrella", MakeTAID(1873743589944));
TA->ItemTable.Keys[3] = MakeTAID(1873743589944);
TA->ItemTable.Hashes[3] = 1873743589944;
ta_item *Item = &TA->ItemTable.Values[3];
Item->Name = "an umbrella";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 7;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "umbrella";
Item->Aliases[1] = "umbrellas";
Item->Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14559691 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14559691);
}
{
HashTableInsert(&TA->ItemNameTable, "cinnamon sugar churros", MakeTAID(1873743590132));
TA->ItemTable.Keys[4] = MakeTAID(1873743590132);
TA->ItemTable.Hashes[4] = 1873743590132;
ta_item *Item = &TA->ItemTable.Values[4];
Item->Name = "cinnamon sugar churros";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 1;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "churro";
Item->Aliases[1] = "churros";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "cinnamon";
Item->Adjectives[1] = "sugar";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14559744 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14559744);
Assert(14559828 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14559828);
}
{
HashTableInsert(&TA->ItemNameTable, "small silver key", MakeTAID(1873743590352));
TA->ItemTable.Keys[5] = MakeTAID(1873743590352);
TA->ItemTable.Hashes[5] = 1873743590352;
ta_item *Item = &TA->ItemTable.Values[5];
Item->Name = "small silver key";
Item->Tag  = MakeAssetTag((asset_tag_id)7, (asset_tag_id)21, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "key";
Item->Aliases[1] = "keys";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "small";
Item->Adjectives[1] = "silver";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14559866 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14559866);
}
{
HashTableInsert(&TA->ItemNameTable, "room 1 window", MakeTAID(1873743591156));
TA->ItemTable.Keys[6] = MakeTAID(1873743591156);
TA->ItemTable.Hashes[6] = 1873743591156;
ta_item *Item = &TA->ItemTable.Values[6];
Item->Name = "room 1 window";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "window";
Item->Aliases[1] = "windows";
Item->Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14559921 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14559921);
}
{
HashTableInsert(&TA->ItemNameTable, "pretty black cat", MakeTAID(1873743591108));
TA->ItemTable.Keys[7] = MakeTAID(1873743591108);
TA->ItemTable.Hashes[7] = 1873743591108;
ta_item *Item = &TA->ItemTable.Values[7];
Item->Name = "pretty black cat";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "cat";
Item->Aliases[1] = "cats";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "pretty";
Item->Adjectives[1] = "black";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14560181 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14560181);
Assert(14560247 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14560247);
}
{
HashTableInsert(&TA->ItemNameTable, "organ console", MakeTAID(1873743591312));
TA->ItemTable.Keys[8] = MakeTAID(1873743591312);
TA->ItemTable.Hashes[8] = 1873743591312;
ta_item *Item = &TA->ItemTable.Values[8];
Item->Name = "organ console";
Item->Tag  = MakeAssetTag((asset_tag_id)7, (asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 4);
Item->Aliases[0] = "organ";
Item->Aliases[1] = "organs";
Item->Aliases[2] = "console";
Item->Aliases[3] = "consoles";
Item->Adjectives = MakeFullArray<const char *>(Memory, 3);
Item->Adjectives[0] = "organ";
Item->Adjectives[1] = "once";
Item->Adjectives[2] = "great";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 4);
Assert(14560295 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14560295);
Assert(14560523 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14560523);
Assert(14560706 < DataSize);
Item->Descriptions[2] = (ta_string *)((u8 *)Data+14560706);
Assert(14560791 < DataSize);
Item->Descriptions[3] = (ta_string *)((u8 *)Data+14560791);
}
{
HashTableInsert(&TA->ItemNameTable, "calatheas", MakeTAID(1873743590992));
TA->ItemTable.Keys[9] = MakeTAID(1873743590992);
TA->ItemTable.Hashes[9] = 1873743590992;
ta_item *Item = &TA->ItemTable.Values[9];
Item->Name = "calatheas";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "fern";
Item->Aliases[1] = "calatheas";
Item->Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14560838 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14560838);
}
{
HashTableInsert(&TA->ItemNameTable, "bread crumbs", MakeTAID(1873743590328));
TA->ItemTable.Keys[10] = MakeTAID(1873743590328);
TA->ItemTable.Hashes[10] = 1873743590328;
ta_item *Item = &TA->ItemTable.Values[10];
Item->Name = "bread crumbs";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "crumb";
Item->Aliases[1] = "crumb";
Item->Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->Adjectives[0] = "bread";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14560940 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14560940);
Assert(14561001 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14561001);
}
{
HashTableInsert(&TA->ItemNameTable, "a lantern", MakeTAID(1873743589980));
TA->ItemTable.Keys[11] = MakeTAID(1873743589980);
TA->ItemTable.Hashes[11] = 1873743589980;
ta_item *Item = &TA->ItemTable.Values[11];
Item->Name = "a lantern";
Item->Tag  = MakeAssetTag((asset_tag_id)23, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 10;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "lantern";
Item->Aliases[1] = "lanterns";
Item->Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14561071 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14561071);
Assert(14561185 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14561185);
}
{
HashTableInsert(&TA->ItemNameTable, "silvery scindapsus", MakeTAID(1873743590876));
TA->ItemTable.Keys[12] = MakeTAID(1873743590876);
TA->ItemTable.Hashes[12] = 1873743590876;
ta_item *Item = &TA->ItemTable.Values[12];
Item->Name = "silvery scindapsus";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "scindapsus";
Item->Aliases[1] = "plant";
Item->Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->Adjectives[0] = "silvery";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14561260 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14561260);
}
{
HashTableInsert(&TA->ItemNameTable, "dark rugged door", MakeTAID(1873743590760));
TA->ItemTable.Keys[13] = MakeTAID(1873743590760);
TA->ItemTable.Hashes[13] = 1873743590760;
ta_item *Item = &TA->ItemTable.Values[13];
Item->Name = "dark rugged door";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "door";
Item->Aliases[1] = "doors";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "dark";
Item->Adjectives[1] = "rugged";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14561331 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14561331);
}
{
HashTableInsert(&TA->ItemNameTable, "organ pipes", MakeTAID(1873743591412));
TA->ItemTable.Keys[14] = MakeTAID(1873743591412);
TA->ItemTable.Hashes[14] = 1873743591412;
ta_item *Item = &TA->ItemTable.Values[14];
Item->Name = "organ pipes";
Item->Tag  = MakeAssetTag((asset_tag_id)7, (asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "pipe";
Item->Aliases[1] = "pipes";
Item->Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->Adjectives[0] = "organ";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14561363 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14561363);
Assert(14561417 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14561417);
}
{
HashTableInsert(&TA->ItemNameTable, "honeyed almond pastries", MakeTAID(1873743590072));
TA->ItemTable.Keys[15] = MakeTAID(1873743590072);
TA->ItemTable.Hashes[15] = 1873743590072;
ta_item *Item = &TA->ItemTable.Values[15];
Item->Name = "honeyed almond pastries";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 3;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "pastry";
Item->Aliases[1] = "pastries";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "honeyed";
Item->Adjectives[1] = "almond";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14561455 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14561455);
Assert(14561576 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14561576);
}
{
HashTableInsert(&TA->ItemNameTable, "carrot cake muffins", MakeTAID(1873743590012));
TA->ItemTable.Keys[16] = MakeTAID(1873743590012);
TA->ItemTable.Hashes[16] = 1873743590012;
ta_item *Item = &TA->ItemTable.Values[16];
Item->Name = "carrot cake muffins";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 2;
Item->Aliases = MakeFullArray<const char *>(Memory, 4);
Item->Aliases[0] = "muffin";
Item->Aliases[1] = "muffins";
Item->Aliases[2] = "cake";
Item->Aliases[3] = "cakes";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "carrot";
Item->Adjectives[1] = "cake";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14561686 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14561686);
Assert(14561760 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14561760);
}
{
HashTableInsert(&TA->ItemNameTable, "plant pot", MakeTAID(1873743590596));
TA->ItemTable.Keys[17] = MakeTAID(1873743590596);
TA->ItemTable.Hashes[17] = 1873743590596;
ta_item *Item = &TA->ItemTable.Values[17];
Item->Name = "plant pot";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 3;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "pot";
Item->Aliases[1] = "pots";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "plant";
Item->Adjectives[1] = "plants";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14561834 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14561834);
}
{
HashTableInsert(&TA->ItemNameTable, "dainty philodendron micans", MakeTAID(1873743590916));
TA->ItemTable.Keys[18] = MakeTAID(1873743590916);
TA->ItemTable.Hashes[18] = 1873743590916;
ta_item *Item = &TA->ItemTable.Values[18];
Item->Name = "dainty philodendron micans";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 3);
Item->Aliases[0] = "philodendron";
Item->Aliases[1] = "micans";
Item->Aliases[2] = "plant";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "dainty";
Item->Adjectives[1] = "philodendron";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14561885 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14561885);
}
{
HashTableInsert(&TA->ItemNameTable, "chocolate croissants", MakeTAID(1873743590192));
TA->ItemTable.Keys[19] = MakeTAID(1873743590192);
TA->ItemTable.Hashes[19] = 1873743590192;
ta_item *Item = &TA->ItemTable.Values[19];
Item->Name = "chocolate croissants";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 2;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "croissant";
Item->Aliases[1] = "croissants";
Item->Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->Adjectives[0] = "chocolate";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14561961 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14561961);
Assert(14562077 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14562077);
}
{
HashTableInsert(&TA->ItemNameTable, "ferns", MakeTAID(1873743590976));
TA->ItemTable.Keys[20] = MakeTAID(1873743590976);
TA->ItemTable.Hashes[20] = 1873743590976;
ta_item *Item = &TA->ItemTable.Values[20];
Item->Name = "ferns";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "fern";
Item->Aliases[1] = "ferns";
Item->Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14562123 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14562123);
}
{
HashTableInsert(&TA->ItemNameTable, "vibrant ceramic plant pot", MakeTAID(1873743591064));
TA->ItemTable.Keys[21] = MakeTAID(1873743591064);
TA->ItemTable.Hashes[21] = 1873743591064;
ta_item *Item = &TA->ItemTable.Values[21];
Item->Name = "vibrant ceramic plant pot";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "pot";
Item->Aliases[1] = "pots";
Item->Adjectives = MakeFullArray<const char *>(Memory, 3);
Item->Adjectives[0] = "vibrant";
Item->Adjectives[1] = "ceramic";
Item->Adjectives[2] = "plant";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14562194 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14562194);
Assert(14562262 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14562262);
}
{
HashTableInsert(&TA->ItemNameTable, "garden gloves", MakeTAID(1873743590688));
TA->ItemTable.Keys[22] = MakeTAID(1873743590688);
TA->ItemTable.Hashes[22] = 1873743590688;
ta_item *Item = &TA->ItemTable.Values[22];
Item->Name = "garden gloves";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 4;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "glove";
Item->Aliases[1] = "gloves";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "garden";
Item->Adjectives[1] = "gardening";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14562310 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14562310);
}
{
HashTableInsert(&TA->ItemNameTable, "organ bellows", MakeTAID(1873743591380));
TA->ItemTable.Keys[23] = MakeTAID(1873743591380);
TA->ItemTable.Hashes[23] = 1873743591380;
ta_item *Item = &TA->ItemTable.Values[23];
Item->Name = "organ bellows";
Item->Tag  = MakeAssetTag((asset_tag_id)7, (asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "bellow";
Item->Aliases[1] = "bellows";
Item->Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->Adjectives[0] = "organ";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14562422 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14562422);
Assert(14562576 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14562576);
}
{
HashTableInsert(&TA->ItemNameTable, "bell tower key", MakeTAID(1873743590400));
TA->ItemTable.Keys[24] = MakeTAID(1873743590400);
TA->ItemTable.Hashes[24] = 1873743590400;
ta_item *Item = &TA->ItemTable.Values[24];
Item->Name = "bell tower key";
Item->Tag  = MakeAssetTag((asset_tag_id)8, (asset_tag_id)21, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "key";
Item->Aliases[1] = "keys";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "bell";
Item->Adjectives[1] = "tower";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14562615 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14562615);
}
{
HashTableInsert(&TA->ItemNameTable, "mess of vines", MakeTAID(1873743590720));
TA->ItemTable.Keys[25] = MakeTAID(1873743590720);
TA->ItemTable.Hashes[25] = 1873743590720;
ta_item *Item = &TA->ItemTable.Values[25];
Item->Name = "mess of vines";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "vine";
Item->Aliases[1] = "vines";
Item->Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->Adjectives[0] = "mess";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14562681 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14562681);
}
{
HashTableInsert(&TA->ItemNameTable, "a town map", MakeTAID(1873743589444));
TA->ItemTable.Keys[26] = MakeTAID(1873743589444);
TA->ItemTable.Hashes[26] = 1873743589444;
ta_item *Item = &TA->ItemTable.Values[26];
Item->Name = "a town map";
Item->Tag  = MakeAssetTag((asset_tag_id)22, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 5;
Item->Aliases = MakeFullArray<const char *>(Memory, 2);
Item->Aliases[0] = "map";
Item->Aliases[1] = "maps";
Item->Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->Adjectives[0] = "town";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14562730 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14562730);
}
{
HashTableInsert(&TA->ItemNameTable, "lush green plants", MakeTAID(1873743591004));
TA->ItemTable.Keys[27] = MakeTAID(1873743591004);
TA->ItemTable.Hashes[27] = 1873743591004;
ta_item *Item = &TA->ItemTable.Values[27];
Item->Name = "lush green plants";
Item->Tag  = MakeAssetTag((asset_tag_id)19, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Aliases = MakeFullArray<const char *>(Memory, 1);
Item->Aliases[0] = "plants";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "lush";
Item->Adjectives[1] = "green";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 1);
Assert(14562869 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14562869);
}
{
HashTableInsert(&TA->ItemNameTable, "large loaves of wheat bread", MakeTAID(1873743590252));
TA->ItemTable.Keys[28] = MakeTAID(1873743590252);
TA->ItemTable.Hashes[28] = 1873743590252;
ta_item *Item = &TA->ItemTable.Values[28];
Item->Name = "large loaves of wheat bread";
Item->Tag  = MakeAssetTag((asset_tag_id)20, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 4;
Item->Aliases = MakeFullArray<const char *>(Memory, 4);
Item->Aliases[0] = "bread";
Item->Aliases[1] = "loaf";
Item->Aliases[2] = "loafs";
Item->Aliases[3] = "loaves";
Item->Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->Adjectives[0] = "large";
Item->Adjectives[1] = "wheat";
Item->Descriptions = MakeFullArray<ta_string *>(Memory, 2);
Assert(14562942 < DataSize);
Item->Descriptions[0] = (ta_string *)((u8 *)Data+14562942);
Assert(14562991 < DataSize);
Item->Descriptions[1] = (ta_string *)((u8 *)Data+14562991);
}
{
Assert(14563152 < DataSize);
u8 *Pixels = ((u8 *)Data+14563152);
TA->Map.Texture = MakeTexture();
TextureUpload(TA->Map.Texture, Pixels, 128, 104, 4);
TA->Map.Size = V2(128.000000, 104.000000);
TA->Map.Areas = MakeFullArray<ta_area>(Memory, 18);
TA->Map.Areas[0] = MakeTAArea(MakeTAID((u64)1873743589732), V2(79.000000, 75.000000));
TA->Map.Areas[1] = MakeTAArea(MakeTAID((u64)1873743589436), V2(103.000000, 41.000000));
TA->Map.Areas[2] = MakeTAArea(MakeTAID((u64)1873743589744), V2(83.000000, 31.000000));
TA->Map.Areas[3] = MakeTAArea(MakeTAID((u64)1873743589748), V2(87.000000, 57.000000));
TA->Map.Areas[4] = MakeTAArea(MakeTAID((u64)1873743589760), V2(94.000000, 52.000000));
TA->Map.Areas[5] = MakeTAArea(MakeTAID((u64)1873743589772), V2(45.000000, 21.000000));
TA->Map.Areas[6] = MakeTAArea(MakeTAID((u64)1873743589788), V2(59.000000, 53.000000));
TA->Map.Areas[7] = MakeTAArea(MakeTAID((u64)1873743589800), V2(109.000000, 56.000000));
TA->Map.Areas[8] = MakeTAArea(MakeTAID((u64)1873743589808), V2(71.000000, 44.000000));
TA->Map.Areas[9] = MakeTAArea(MakeTAID((u64)1873743589812), V2(60.000000, 60.000000));
TA->Map.Areas[10] = MakeTAArea(MakeTAID((u64)1873743589824), V2(84.000000, 48.000000));
TA->Map.Areas[11] = MakeTAArea(MakeTAID((u64)1873743589836), V2(93.000000, 41.000000));
TA->Map.Areas[12] = MakeTAArea(MakeTAID((u64)1873743589848), V2(84.000000, 41.000000));
TA->Map.Areas[13] = MakeTAArea(MakeTAID((u64)1873743589860), V2(45.000000, 45.000000));
TA->Map.Areas[14] = MakeTAArea(MakeTAID((u64)1873743589872), V2(93.000000, 31.000000));
TA->Map.Areas[15] = MakeTAArea(MakeTAID((u64)1873743589880), V2(61.000000, 35.000000));
TA->Map.Areas[16] = MakeTAArea(MakeTAID((u64)1873743589892), V2(72.000000, 38.000000));
TA->Map.Areas[17] = MakeTAArea(MakeTAID((u64)1873743589908), V2(47.000000, 36.000000));
}
}
#endif // GENERATED_ASSET_DATA_H
