#if !defined(GENERATED_ASSET_DATA_H) && defined(SNAIL_JUMPY_USE_PROCESSED_ASSETS)
#define GENERATED_ASSET_DATA_H
internal inline void
InitializeProcessedAssets(asset_system *Assets, void *Data, u32 DataSize){
ta_system *TA = &TextAdventure;
memory_arena *Memory = &Assets->Memory;
Assets->SoundEffects[1].Sound.ChannelCount = 2;
Assets->SoundEffects[1].Sound.SampleCount  = 26368;
Assets->SoundEffects[1].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[1].VolumeMultiplier   = 1.000000f;
Assert(4 < DataSize);
Assets->SoundEffects[1].Sound.Samples = (s16 *)((u8 *)Data+4);
Assets->SoundEffects[2].Sound.ChannelCount = 2;
Assets->SoundEffects[2].Sound.SampleCount  = 2913408;
Assets->SoundEffects[2].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[2].VolumeMultiplier   = 1.000000f;
Assert(105476 < DataSize);
Assets->SoundEffects[2].Sound.Samples = (s16 *)((u8 *)Data+105476);
Assets->SoundEffects[3].Sound.ChannelCount = 2;
Assets->SoundEffects[3].Sound.SampleCount  = 2013;
Assets->SoundEffects[3].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[3].VolumeMultiplier   = 1.000000f;
Assert(11759108 < DataSize);
Assets->SoundEffects[3].Sound.Samples = (s16 *)((u8 *)Data+11759108);
Assets->SoundEffects[4].Sound.ChannelCount = 2;
Assets->SoundEffects[4].Sound.SampleCount  = 64000;
Assets->SoundEffects[4].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[4].VolumeMultiplier   = 1.000000f;
Assert(11767160 < DataSize);
Assets->SoundEffects[4].Sound.Samples = (s16 *)((u8 *)Data+11767160);
Assets->SoundEffects[5].Sound.ChannelCount = 2;
Assets->SoundEffects[5].Sound.SampleCount  = 38790;
Assets->SoundEffects[5].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[5].VolumeMultiplier   = 1.000000f;
Assert(12023160 < DataSize);
Assets->SoundEffects[5].Sound.Samples = (s16 *)((u8 *)Data+12023160);
Assets->SoundEffects[6].Sound.ChannelCount = 2;
Assets->SoundEffects[6].Sound.SampleCount  = 35296;
Assets->SoundEffects[6].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[6].VolumeMultiplier   = 1.000000f;
Assert(12178320 < DataSize);
Assets->SoundEffects[6].Sound.Samples = (s16 *)((u8 *)Data+12178320);
Assets->SoundEffects[7].Sound.ChannelCount = 2;
Assets->SoundEffects[7].Sound.SampleCount  = 33075;
Assets->SoundEffects[7].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[7].VolumeMultiplier   = 1.000000f;
Assert(12319504 < DataSize);
Assets->SoundEffects[7].Sound.Samples = (s16 *)((u8 *)Data+12319504);
Assets->SoundEffects[8].Sound.ChannelCount = 2;
Assets->SoundEffects[8].Sound.SampleCount  = 6790;
Assets->SoundEffects[8].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[8].VolumeMultiplier   = 1.000000f;
Assert(12451804 < DataSize);
Assets->SoundEffects[8].Sound.Samples = (s16 *)((u8 *)Data+12451804);
Assets->SoundEffects[9].Sound.ChannelCount = 2;
Assets->SoundEffects[9].Sound.SampleCount  = 43715;
Assets->SoundEffects[9].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[9].VolumeMultiplier   = 1.000000f;
Assert(12478964 < DataSize);
Assets->SoundEffects[9].Sound.Samples = (s16 *)((u8 *)Data+12478964);
Assets->SoundEffects[10].Sound.ChannelCount = 2;
Assets->SoundEffects[10].Sound.SampleCount  = 358272;
Assets->SoundEffects[10].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[10].VolumeMultiplier   = 1.000000f;
Assert(12653824 < DataSize);
Assets->SoundEffects[10].Sound.Samples = (s16 *)((u8 *)Data+12653824);
Assets->SoundEffects[11].Sound.ChannelCount = 2;
Assets->SoundEffects[11].Sound.SampleCount  = 14700;
Assets->SoundEffects[11].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[11].VolumeMultiplier   = 1.000000f;
Assert(14086912 < DataSize);
Assets->SoundEffects[11].Sound.Samples = (s16 *)((u8 *)Data+14086912);
Assets->SoundEffects[12].Sound.ChannelCount = 2;
Assets->SoundEffects[12].Sound.SampleCount  = 37948;
Assets->SoundEffects[12].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[12].VolumeMultiplier   = 1.000000f;
Assert(14145712 < DataSize);
Assets->SoundEffects[12].Sound.Samples = (s16 *)((u8 *)Data+14145712);
Assets->SoundEffects[13].Sound.ChannelCount = 2;
Assets->SoundEffects[13].Sound.SampleCount  = 38656;
Assets->SoundEffects[13].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[13].VolumeMultiplier   = 1.000000f;
Assert(14297504 < DataSize);
Assets->SoundEffects[13].Sound.Samples = (s16 *)((u8 *)Data+14297504);
Assets->SoundEffects[14].Sound.ChannelCount = 2;
Assets->SoundEffects[14].Sound.SampleCount  = 27562;
Assets->SoundEffects[14].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[14].VolumeMultiplier   = 1.000000f;
Assert(14452128 < DataSize);
Assets->SoundEffects[14].Sound.Samples = (s16 *)((u8 *)Data+14452128);
Assets->SoundEffects[15].Sound.ChannelCount = 2;
Assets->SoundEffects[15].Sound.SampleCount  = 28160;
Assets->SoundEffects[15].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[15].VolumeMultiplier   = 1.000000f;
Assert(14562376 < DataSize);
Assets->SoundEffects[15].Sound.Samples = (s16 *)((u8 *)Data+14562376);
Assets->SoundEffects[16].Sound.ChannelCount = 2;
Assets->SoundEffects[16].Sound.SampleCount  = 27562;
Assets->SoundEffects[16].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[16].VolumeMultiplier   = 1.000000f;
Assert(14675016 < DataSize);
Assets->SoundEffects[16].Sound.Samples = (s16 *)((u8 *)Data+14675016);
Assets->SoundEffects[17].Sound.ChannelCount = 2;
Assets->SoundEffects[17].Sound.SampleCount  = 2013;
Assets->SoundEffects[17].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[17].VolumeMultiplier   = 1.000000f;
Assert(14785264 < DataSize);
Assets->SoundEffects[17].Sound.Samples = (s16 *)((u8 *)Data+14785264);
{
Assets->Fonts[1].Size    = V2S(64, 72);
Assets->Fonts[1].Height  = 7.000000;
Assets->Fonts[1].Descent = 2.000000;
Assert(14793316 < DataSize);
CopyMemory(Assets->Fonts[1].Table, ((u8 *)Data+14793316), sizeof(Assets->Fonts[1].Table));
Assert(14794852 < DataSize);
u8 *Pixels = ((u8 *)Data+14794852);
Assets->Fonts[1].Texture = MakeTexture();
TextureUpload(Assets->Fonts[1].Texture, Pixels, 64, 72, 4);
}
{
Assets->Fonts[2].Size    = V2S(50, 49);
Assets->Fonts[2].Height  = 5.000000;
Assets->Fonts[2].Descent = 0.000000;
Assert(14813284 < DataSize);
CopyMemory(Assets->Fonts[2].Table, ((u8 *)Data+14813284), sizeof(Assets->Fonts[2].Table));
Assert(14814820 < DataSize);
u8 *Pixels = ((u8 *)Data+14814820);
Assets->Fonts[2].Texture = MakeTexture();
TextureUpload(Assets->Fonts[2].Texture, Pixels, 50, 49, 4);
}
{
Assets->Fonts[3].Size    = V2S(50, 49);
Assets->Fonts[3].Height  = 5.000000;
Assets->Fonts[3].Descent = 0.000000;
Assert(14824620 < DataSize);
CopyMemory(Assets->Fonts[3].Table, ((u8 *)Data+14824620), sizeof(Assets->Fonts[3].Table));
Assert(14826156 < DataSize);
u8 *Pixels = ((u8 *)Data+14826156);
Assets->Fonts[3].Texture = MakeTexture();
TextureUpload(Assets->Fonts[3].Texture, Pixels, 50, 49, 4);
}
{
Assets->Fonts[4].Size    = V2S(45, 27);
Assets->Fonts[4].Height  = 5.000000;
Assets->Fonts[4].Descent = 2.000000;
Assert(14835956 < DataSize);
CopyMemory(Assets->Fonts[4].Table, ((u8 *)Data+14835956), sizeof(Assets->Fonts[4].Table));
Assert(14837492 < DataSize);
u8 *Pixels = ((u8 *)Data+14837492);
Assets->Fonts[4].Texture = MakeTexture();
TextureUpload(Assets->Fonts[4].Texture, Pixels, 45, 27, 4);
}
{
Assets->Fonts[5].Size    = V2S(64, 85);
Assets->Fonts[5].Height  = 15.000000;
Assets->Fonts[5].Descent = 5.000000;
Assert(14842352 < DataSize);
CopyMemory(Assets->Fonts[5].Table, ((u8 *)Data+14842352), sizeof(Assets->Fonts[5].Table));
Assert(14843888 < DataSize);
u8 *Pixels = ((u8 *)Data+14843888);
Assets->Fonts[5].Texture = MakeTexture();
TextureUpload(Assets->Fonts[5].Texture, Pixels, 64, 85, 4);
}
{
Assets->Variables[1].S    = "theme_default";
Assets->Variables[1].TAID = MakeTAID(2497119006728);
}
{
Assets->Variables[2].S    = "Do you want to buy that?";
Assets->Variables[2].TAID = MakeTAID(0);
}
{
Assets->Variables[3].S    = "A fog slowly enter the area filling everything and blocking your entire view.";
Assets->Variables[3].TAID = MakeTAID(0);
}
{
Assets->Variables[4].S    = "The fog slowly creeps away, and so does the chill.";
Assets->Variables[4].TAID = MakeTAID(0);
}
{
Assets->Variables[5].S    = "game";
Assets->Variables[5].TAID = MakeTAID(0);
}
{
Assets->Variables[6].S    = "You couldn't possible hope to buy that!";
Assets->Variables[6].TAID = MakeTAID(0);
}
{
Assets->Variables[7].S    = "You don't have to \002\002buy\002\001 that!";
Assets->Variables[7].TAID = MakeTAID(0);
}
{
Assets->Variables[8].S    = "Cathedral altar";
Assets->Variables[8].TAID = MakeTAID(2497119006772);
}
{
Assets->Variables[9].S    = "Are you sure you want to buy that?";
Assets->Variables[9].TAID = MakeTAID(0);
}
{
Assets->Variables[10].S    = "You don't have enough \002\002money\002\001 for that!";
Assets->Variables[10].TAID = MakeTAID(0);
}
{
Assets->Variables[11].S    = "That is not a valid command!\n\002\002You fool\002\001!!!";
Assets->Variables[11].TAID = MakeTAID(0);
}
{
Assets->Variables[12].S    = "You can't eat \002\002that\002\001!";
Assets->Variables[12].TAID = MakeTAID(0);
}
{
Assets->Variables[13].S    = "You will have to be more specific, what item do you want to %s\nEnter the item: ";
Assets->Variables[13].TAID = MakeTAID(0);
}
{
Assets->Variables[14].S    = "What do you want to eat!?!?";
Assets->Variables[14].TAID = MakeTAID(0);
}
{
Assets->Variables[15].S    = "This room is much too \002\002small\002\001!";
Assets->Variables[15].TAID = MakeTAID(0);
}
{
Assets->Variables[16].S    = "What do you want to examine?";
Assets->Variables[16].TAID = MakeTAID(0);
}
{
Assets->Variables[17].S    = "I don't know where you want to move! Please be mor specific!";
Assets->Variables[17].TAID = MakeTAID(0);
}
{
Assets->Variables[18].S    = "You can't examine that!";
Assets->Variables[18].TAID = MakeTAID(0);
}
{
Assets->Variables[19].S    = "That way is locked, \002\002buddy-o\002\001!";
Assets->Variables[19].TAID = MakeTAID(0);
}
{
Assets->Variables[20].S    = "That can't be fixed!";
Assets->Variables[20].TAID = MakeTAID(0);
}
{
Assets->Variables[21].S    = "(unlocked)";
Assets->Variables[21].TAID = MakeTAID(0);
}
{
Assets->Variables[22].S    = "That is not broken!";
Assets->Variables[22].TAID = MakeTAID(0);
}
{
Assets->Variables[23].S    = "Why would you want move that way!?\nDoing so would be quite \002\002foolish\002\001!";
Assets->Variables[23].TAID = MakeTAID(0);
}
{
Assets->Variables[24].S    = "I don't know how to use that!";
Assets->Variables[24].TAID = MakeTAID(0);
}
{
Assets->Variables[25].S    = "Don't you understand how to move!?\nYou need to specify a direction or location, \002\002pal\002\001!";
Assets->Variables[25].TAID = MakeTAID(0);
}
{
Assets->Variables[26].S    = "I'm afraid you don't have that!";
Assets->Variables[26].TAID = MakeTAID(0);
}
{
Assets->Variables[27].S    = "Where do you exit to!?";
Assets->Variables[27].TAID = MakeTAID(0);
}
{
Assets->Variables[28].S    = "This is life, you don't get a redo!";
Assets->Variables[28].TAID = MakeTAID(0);
}
{
Assets->Variables[29].S    = "There is no where to enter!?";
Assets->Variables[29].TAID = MakeTAID(0);
}
{
Assets->Variables[30].S    = "This is life, there are no undos! and you can't redo without an undo first.";
Assets->Variables[30].TAID = MakeTAID(0);
}
{
Assets->Variables[31].S    = "Do you want to buy %s, yes or no?";
Assets->Variables[31].TAID = MakeTAID(0);
}
{
Assets->Variables[32].S    = "A slight breeze stirs the room.";
Assets->Variables[32].TAID = MakeTAID(0);
}
{
Assets->Variables[33].S    = "Item not bought!";
Assets->Variables[33].TAID = MakeTAID(0);
}
{
Assets->Variables[34].S    = "You feel an incredible power flow around you, and the air becomes faintly chilly.";
Assets->Variables[34].TAID = MakeTAID(0);
}
{
Assets->Variables[35].S    = "You're going to have to \002\002buy\002\001 that!";
Assets->Variables[35].TAID = MakeTAID(0);
}
{
Assets->Variables[36].S    = "The slight breeze ends and the chill dissipates";
Assets->Variables[36].TAID = MakeTAID(0);
}
TA->ThemeTable.BucketsUsed = 2;
{
TA->ThemeTable.Keys[0] = MakeTAID(2497119006728);
TA->ThemeTable.Hashes[0] = 2497119006728;
console_theme *Theme = &TA->ThemeTable.Values[0];
Theme->BasicFont = AssetID(font_basic); 
Theme->TitleFont = AssetID(font_basic_bold); 
Theme->BackgroundColor = MakeColor(0.039216f, 0.050980f, 0.290196f, 1.000000f); 
Theme->CursorColor = MakeColor(0.949020f, 0.949020f, 0.949020f, 1.000000f); 
Theme->SelectionColor = MakeColor(0.137255f, 0.172549f, 0.862745f, 1.000000f); 
Theme->BasicFancy = MakeFancyFormat(MakeColor(0.95f, 0.95f, 0.95f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->RoomTitleFancy = MakeFancyFormat(MakeColor(1.00f, 0.41f, 0.41f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 1.00f, 6.28f, 3.14f, 0.00f, 0.00f, 0.00f);
Theme->ItemFancy = MakeFancyFormat(MakeColor(0.14f, 0.89f, 0.89f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->RoomFancy = MakeFancyFormat(MakeColor(1.00f, 0.41f, 0.41f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->DirectionFancy = MakeFancyFormat(MakeColor(0.37f, 0.92f, 0.51f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->MiscFancy = MakeFancyFormat(MakeColor(0.96f, 0.84f, 0.34f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->MoodFancy = MakeFancyFormat(MakeColor(0.35f, 0.67f, 0.54f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->ResponseFancies[0] = MakeFancyFormat(MakeColor(0.56f, 0.39f, 1.00f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->ResponseFancies[1] = MakeFancyFormat(MakeColor(0.90f, 0.31f, 0.80f, 1.00f), MakeColor(0.56f, 0.39f, 1.00f, 1.00f), 0.00f, 0.00f, 0.00f, 3.14f, 0.31f, 0.00f);
Theme->DescriptionFancies[0] = Theme->BasicFancy;
Theme->DescriptionFancies[1] = Theme->DirectionFancy;
Theme->DescriptionFancies[2] = Theme->RoomFancy;
Theme->DescriptionFancies[3] = Theme->ItemFancy;
Theme->DescriptionFancies[4] = Theme->MiscFancy;
Theme->DescriptionFancies[5] = Theme->MoodFancy;
}
{
TA->ThemeTable.Keys[1] = MakeTAID(2497119007292);
TA->ThemeTable.Hashes[1] = 2497119007292;
console_theme *Theme = &TA->ThemeTable.Values[1];
Theme->BasicFont = AssetID(font_basic); 
Theme->TitleFont = AssetID(font_basic_bold); 
Theme->BackgroundColor = MakeColor(0.035294f, 0.211765f, 0.039216f, 1.000000f); 
Theme->CursorColor = MakeColor(0.000000f, 0.000000f, 0.000000f, 0.000000f); 
Theme->SelectionColor = MakeColor(0.000000f, 0.000000f, 0.000000f, 0.000000f); 
Theme->BasicFancy = MakeFancyFormat(MakeColor(0.95f, 0.95f, 0.95f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->RoomTitleFancy = MakeFancyFormat(MakeColor(1.00f, 0.41f, 0.41f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 1.00f, 6.28f, 3.14f, 0.00f, 0.00f, 0.00f);
Theme->ItemFancy = MakeFancyFormat(MakeColor(0.14f, 0.89f, 0.89f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->RoomFancy = MakeFancyFormat(MakeColor(1.00f, 0.89f, 0.41f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 1.00f, 4.71f, 0.20f, 0.00f, 0.00f, 0.00f);
Theme->DirectionFancy = MakeFancyFormat(MakeColor(0.42f, 0.22f, 1.00f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->MiscFancy = MakeFancyFormat(MakeColor(0.00f, 0.00f, 0.00f, 0.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->MoodFancy = MakeFancyFormat(MakeColor(0.00f, 0.00f, 0.00f, 0.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->ResponseFancies[0] = MakeFancyFormat(MakeColor(0.56f, 0.39f, 1.00f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->ResponseFancies[1] = MakeFancyFormat(MakeColor(0.88f, 0.43f, 0.80f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 1.00f, 7.85f, 4.71f, 0.00f, 0.00f, 0.00f);
Theme->DescriptionFancies[0] = Theme->BasicFancy;
Theme->DescriptionFancies[1] = Theme->DirectionFancy;
Theme->DescriptionFancies[2] = Theme->RoomFancy;
Theme->DescriptionFancies[3] = Theme->ItemFancy;
Theme->DescriptionFancies[4] = Theme->MiscFancy;
Theme->DescriptionFancies[5] = Theme->MoodFancy;
}
TA->RoomTable.BucketsUsed = 46;
{
TA->RoomTable.Keys[0] = MakeTAID(2497119010572);
TA->RoomTable.Hashes[0] = 2497119010572;
ta_room *Room = &TA->RoomTable.Values[0];
Room->NameData.Name = "Cathedral vestry";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "vestry";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "church";
Room->Area = MakeTAID(2497119007756);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14865648 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14865648);
Assert(14866094 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14866094);
Assert(14866204 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14866204);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2497119008512);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119006772);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[1] = MakeTAID(2497119010388);
TA->RoomTable.Hashes[1] = 2497119010388;
ta_room *Room = &TA->RoomTable.Values[1];
Room->NameData.Name = "Tailor shop";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "tailor";
Room->NameData.Aliases[1] = "shop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Room->Area = MakeTAID(2497119007976);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14866219 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14866219);
Assert(14866523 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14866523);
Assert(14866532 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14866532);
Assert(14866541 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14866541);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2497119008436);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119009052);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[2] = MakeTAID(2497119007720);
TA->RoomTable.Hashes[2] = 2497119007720;
ta_room *Room = &TA->RoomTable.Values[2];
Room->NameData.Name = "Art studio";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "art";
Room->NameData.Aliases[1] = "studio";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "art";
Room->Area = MakeTAID(0);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14866556 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14866556);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[3] = MakeTAID(2497119007852);
TA->RoomTable.Hashes[3] = 2497119007852;
ta_room *Room = &TA->RoomTable.Values[3];
Room->NameData.Name = "Plant shop";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "shop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "plant";
Room->Area = MakeTAID(2497119007852);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14866575 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14866575);
Assert(14866958 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14866958);
Assert(14867082 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14867082);
Assert(14867137 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14867137);
Room->Items = MakeFullArray<ta_id>(Memory, 8);
Room->Items[0] = MakeTAID(2497119009576);
Room->Items[1] = MakeTAID(2497119009616);
Room->Items[2] = MakeTAID(2497119009668);
Room->Items[3] = MakeTAID(2497119009976);
Room->Items[4] = MakeTAID(2497119009888);
Room->Items[5] = MakeTAID(2497119009948);
Room->Items[6] = MakeTAID(2497119009964);
Room->Items[7] = MakeTAID(2497119009848);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119010012);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119009140);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[4] = MakeTAID(2497119010668);
TA->RoomTable.Hashes[4] = 2497119010668;
ta_room *Room = &TA->RoomTable.Values[4];
Room->NameData.Name = "Cathedral maintenance room";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "maintenance";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "maintenance";
Room->Area = MakeTAID(2497119007756);
Room->Tag = MakeAssetTag((asset_tag_id)11, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14867152 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14867152);
Assert(14867526 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14867526);
Assert(14867557 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14867557);
Assert(14867643 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14867643);
Room->Items = MakeFullArray<ta_id>(Memory, 2);
Room->Items[0] = MakeTAID(2497119010420);
Room->Items[1] = MakeTAID(2497119010460);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119010512);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[5] = MakeTAID(2497119009140);
TA->RoomTable.Hashes[5] = 2497119009140;
ta_room *Room = &TA->RoomTable.Values[5];
Room->NameData.Name = "Plant shop front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "front";
Room->NameData.Aliases[1] = "shop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "plant";
Room->NameData.Adjectives[1] = "shop";
Room->Area = MakeTAID(2497119007852);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14867658 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14867658);
Assert(14868086 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14868086);
Assert(14868182 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14868182);
Room->Items = MakeFullArray<ta_id>(Memory, 3);
Room->Items[0] = MakeTAID(2497119009700);
Room->Items[1] = MakeTAID(2497119009740);
Room->Items[2] = MakeTAID(2497119009776);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119007852);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007784);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[6] = MakeTAID(2497119010348);
TA->RoomTable.Hashes[6] = 2497119010348;
ta_room *Room = &TA->RoomTable.Values[6];
Room->NameData.Name = "Bar cellar";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "cellar";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "bar";
Room->Area = MakeTAID(2497119007740);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14868197 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14868197);
Assert(14868290 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14868290);
Assert(14868299 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14868299);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2497119007740);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[7] = MakeTAID(2497119007864);
TA->RoomTable.Hashes[7] = 2497119007864;
ta_room *Room = &TA->RoomTable.Values[7];
Room->NameData.Name = "Southeast plaza";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "plaza";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 4);
Room->NameData.Adjectives[0] = "se";
Room->NameData.Adjectives[1] = "southeast";
Room->NameData.Adjectives[2] = "south";
Room->NameData.Adjectives[3] = "east";
Room->Area = MakeTAID(2497119007864);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14868314 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14868314);
Assert(14868509 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14868509);
Room->Items = MakeFullArray<ta_id>(Memory, 3);
Room->Items[0] = MakeTAID(2497119008648);
Room->Items[1] = MakeTAID(2497119008704);
Room->Items[2] = MakeTAID(2497119008744);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119008824);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)2497119007796);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119008840);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119008856);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119007880);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[8] = MakeTAID(2497119007820);
TA->RoomTable.Hashes[8] = 2497119007820;
ta_room *Room = &TA->RoomTable.Values[8];
Room->NameData.Name = "Garden fountain";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "fountain";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "garden";
Room->Area = MakeTAID(2497119007820);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14868704 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14868704);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119007836);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007796);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)2497119007796);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119007808);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[9] = MakeTAID(2497119010212);
TA->RoomTable.Hashes[9] = 2497119010212;
ta_room *Room = &TA->RoomTable.Values[9];
Room->NameData.Name = "Inn hallway";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "hallway";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "inn";
Room->Area = MakeTAID(2497119007848);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14868728 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14868728);
Assert(14868819 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14868819);
Assert(14868828 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14868828);
Assert(14868843 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14868843);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2497119010192);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[10] = MakeTAID(2497119007960);
TA->RoomTable.Hashes[10] = 2497119007960;
ta_room *Room = &TA->RoomTable.Values[10];
Room->NameData.Name = "West Thorn Lane";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "thorn";
Room->NameData.Aliases[1] = "lane";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "w";
Room->NameData.Adjectives[1] = "west";
Room->NameData.Adjectives[2] = "thorn";
Room->Area = MakeTAID(2497119007960);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14868858 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14868858);
Assert(14868882 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14868882);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119009076);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119007932);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119009096);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119009116);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[11] = MakeTAID(2497119010536);
TA->RoomTable.Hashes[11] = 2497119010536;
ta_room *Room = &TA->RoomTable.Values[11];
Room->NameData.Name = "Cathedral spiral staircase";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "spiral";
Room->NameData.Aliases[1] = "staircase";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "spiral";
Room->NameData.Adjectives[2] = "church";
Room->Area = MakeTAID(2497119007744);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14868891 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14868891);
Assert(14869154 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14869154);
Assert(14869284 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14869284);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2497119008560);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119010488);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2497119010728);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)12, (asset_tag_id)17, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[12] = MakeTAID(2497119007732);
TA->RoomTable.Hashes[12] = 2497119007732;
ta_room *Room = &TA->RoomTable.Values[12];
Room->NameData.Name = "Bakery";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "bakery";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Room->Area = MakeTAID(2497119007732);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14869299 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14869299);
Assert(14869471 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14869471);
Assert(14869590 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14869590);
Assert(14869650 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14869650);
Room->Items = MakeFullArray<ta_id>(Memory, 5);
Room->Items[0] = MakeTAID(2497119008084);
Room->Items[1] = MakeTAID(2497119008144);
Room->Items[2] = MakeTAID(2497119008204);
Room->Items[3] = MakeTAID(2497119008264);
Room->Items[4] = MakeTAID(2497119008324);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119010308);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119008840);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[13] = MakeTAID(2497119008824);
TA->RoomTable.Hashes[13] = 2497119008824;
ta_room *Room = &TA->RoomTable.Values[13];
Room->NameData.Name = "Cathedral front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Aliases[0] = "cathedral";
Room->NameData.Aliases[1] = "church";
Room->NameData.Aliases[2] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "church";
Room->Area = MakeTAID(2497119007756);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14869665 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14869665);
Assert(14869953 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14869953);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119010488);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007864);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[14] = MakeTAID(2497119010488);
TA->RoomTable.Hashes[14] = 2497119010488;
ta_room *Room = &TA->RoomTable.Values[14];
Room->NameData.Name = "Cathedral nave";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Aliases[0] = "cathedral";
Room->NameData.Aliases[1] = "church";
Room->NameData.Aliases[2] = "nave";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "church";
Room->Area = MakeTAID(2497119007756);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14870059 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14870059);
Assert(14870326 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14870326);
Assert(14870570 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14870570);
Assert(14870585 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14870585);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119006772);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)2497119010512);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119008824);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119010536);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[15] = MakeTAID(2497119008956);
TA->RoomTable.Hashes[15] = 2497119008956;
ta_room *Room = &TA->RoomTable.Values[15];
Room->NameData.Name = "Bar front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "bar";
Room->NameData.Aliases[1] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "bar";
Room->Area = MakeTAID(2497119007740);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14870600 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14870600);
Assert(14870631 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14870631);
Assert(14870724 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14870724);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119007880);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119008856);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007740);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119007944);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[16] = MakeTAID(2497119008840);
TA->RoomTable.Hashes[16] = 2497119008840;
ta_room *Room = &TA->RoomTable.Values[16];
Room->NameData.Name = "Bakery front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "bakery";
Room->NameData.Aliases[1] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "bakery";
Room->Area = MakeTAID(2497119007732);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14870739 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14870739);
Assert(14870962 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14870962);
Assert(14871086 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14871086);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119007732);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119007864);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[17] = MakeTAID(2497119010804);
TA->RoomTable.Hashes[17] = 2497119010804;
ta_room *Room = &TA->RoomTable.Values[17];
Room->NameData.Name = "Bell tower playing room";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "playing";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "bell";
Room->NameData.Adjectives[1] = "tower";
Room->NameData.Adjectives[2] = "playing";
Room->Area = MakeTAID(2497119007744);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14871101 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14871101);
Assert(14871110 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14871110);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2497119010844);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2497119010728);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[18] = MakeTAID(2497119010268);
TA->RoomTable.Hashes[18] = 2497119010268;
ta_room *Room = &TA->RoomTable.Values[18];
Room->NameData.Name = "Inn room 2";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "2";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "inn";
Room->NameData.Adjectives[1] = "room";
Room->Area = MakeTAID(2497119007848);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14871119 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14871119);
Assert(14871165 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14871165);
Assert(14871174 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14871174);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119010212);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[19] = MakeTAID(2497119007784);
TA->RoomTable.Hashes[19] = 2497119007784;
ta_room *Room = &TA->RoomTable.Values[19];
Room->NameData.Name = "Dark alley";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "alley";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "dark";
Room->Area = MakeTAID(2497119007784);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14871189 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14871189);
Assert(14871468 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14871468);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119009140);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007932);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[20] = MakeTAID(2497119009028);
TA->RoomTable.Hashes[20] = 2497119009028;
ta_room *Room = &TA->RoomTable.Values[20];
Room->NameData.Name = "Inn front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "inn";
Room->NameData.Aliases[1] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "inn";
Room->Area = MakeTAID(2497119007848);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14871607 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14871607);
Assert(14871788 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14871788);
Assert(14871797 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14871797);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119010192);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119007880);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007944);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119007932);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[21] = MakeTAID(2497119010728);
TA->RoomTable.Hashes[21] = 2497119010728;
ta_room *Room = &TA->RoomTable.Values[21];
Room->NameData.Name = "Bell tower programming room";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 5);
Room->NameData.Aliases[0] = "programming";
Room->NameData.Aliases[1] = "room";
Room->NameData.Aliases[2] = "bell";
Room->NameData.Aliases[3] = "tower";
Room->NameData.Aliases[4] = "carillon";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 4);
Room->NameData.Adjectives[0] = "bell";
Room->NameData.Adjectives[1] = "tower";
Room->NameData.Adjectives[2] = "programming";
Room->NameData.Adjectives[3] = "carillon";
Room->Area = MakeTAID(2497119007744);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14871812 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14871812);
Assert(14871821 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14871821);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119010780);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2497119010804);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2497119010536);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[22] = MakeTAID(2497119007880);
TA->RoomTable.Hashes[22] = 2497119007880;
ta_room *Room = &TA->RoomTable.Values[22];
Room->NameData.Name = "Southwest plaza";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "plaza";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 4);
Room->NameData.Adjectives[0] = "sw";
Room->NameData.Adjectives[1] = "southwest";
Room->NameData.Adjectives[2] = "south";
Room->NameData.Adjectives[3] = "west";
Room->Area = MakeTAID(2497119007880);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14871905 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14871905);
Assert(14872082 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14872082);
Room->Items = MakeFullArray<ta_id>(Memory, 2);
Room->Items[0] = MakeTAID(2497119008868);
Room->Items[1] = MakeTAID(2497119008904);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119007896);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)2497119007796);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119007864);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119008956);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119007944);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[23] = MakeTAID(2497119007924);
TA->RoomTable.Hashes[23] = 2497119007924;
ta_room *Room = &TA->RoomTable.Values[23];
Room->NameData.Name = "Shop";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "shop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Room->Area = MakeTAID(2497119007924);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14872258 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14872258);
Assert(14872454 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14872454);
Assert(14872541 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14872541);
Assert(14872579 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14872579);
Room->Items = MakeFullArray<ta_id>(Memory, 3);
Room->Items[0] = MakeTAID(2497119007984);
Room->Items[1] = MakeTAID(2497119008016);
Room->Items[2] = MakeTAID(2497119008052);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119008856);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[24] = MakeTAID(2497119010872);
TA->RoomTable.Hashes[24] = 2497119010872;
ta_room *Room = &TA->RoomTable.Values[24];
Room->NameData.Name = "Bell tower lookout";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "lookout";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "bell";
Room->NameData.Adjectives[1] = "tower";
Room->Area = MakeTAID(2497119007744);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14872594 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14872594);
Assert(14872899 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14872899);
Assert(14872914 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14872914);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2497119010844);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[25] = MakeTAID(2497119010780);
TA->RoomTable.Hashes[25] = 2497119010780;
ta_room *Room = &TA->RoomTable.Values[25];
Room->NameData.Name = "Bell tower storage room";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "storage";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "bell";
Room->NameData.Adjectives[1] = "tower";
Room->NameData.Adjectives[2] = "storage";
Room->Area = MakeTAID(2497119007744);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14872923 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14872923);
Assert(14872932 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14872932);
Assert(14873022 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14873022);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119010728);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[26] = MakeTAID(2497119007836);
TA->RoomTable.Hashes[26] = 2497119007836;
ta_room *Room = &TA->RoomTable.Values[26];
Room->NameData.Name = "Graveyard";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "graveyard";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Room->Area = MakeTAID(2497119007836);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14873037 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14873037);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)2497119007820);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007808);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[27] = MakeTAID(2497119006772);
TA->RoomTable.Hashes[27] = 2497119006772;
ta_room *Room = &TA->RoomTable.Values[27];
Room->NameData.Name = "Cathedral altar";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "altar";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "church";
Room->Area = MakeTAID(2497119007756);
Room->Tag = MakeAssetTag((asset_tag_id)14, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14873055 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14873055);
Assert(14873141 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14873141);
Assert(14873288 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14873288);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119010512);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119010488);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119010572);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[28] = MakeTAID(2497119007932);
TA->RoomTable.Hashes[28] = 2497119007932;
ta_room *Room = &TA->RoomTable.Values[28];
Room->NameData.Name = "Thorn Lane";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "thorn";
Room->NameData.Aliases[1] = "lane";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "thorn";
Room->Area = MakeTAID(2497119007932);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14873303 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14873303);
Assert(14873322 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14873322);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119007784);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119007944);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119009052);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119007960);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[29] = MakeTAID(2497119007740);
TA->RoomTable.Hashes[29] = 2497119007740;
ta_room *Room = &TA->RoomTable.Values[29];
Room->NameData.Name = "Bar";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "bar";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Room->Area = MakeTAID(2497119007740);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14873331 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14873331);
Assert(14873346 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14873346);
Assert(14873421 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14873421);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119008956);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2497119010328);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2497119010348);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[30] = MakeTAID(2497119007796);
TA->RoomTable.Hashes[30] = 2497119007796;
ta_room *Room = &TA->RoomTable.Values[30];
Room->NameData.Name = "Garden lawn";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "garden";
Room->NameData.Aliases[1] = "lawn";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "garden";
Room->Area = MakeTAID(2497119007796);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14873436 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14873436);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2497119008620);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119007808);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)2497119007820);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)2497119007864);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[31] = MakeTAID(2497119008992);
TA->RoomTable.Hashes[31] = 2497119008992;
ta_room *Room = &TA->RoomTable.Values[31];
Room->NameData.Name = "James street";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "james";
Room->NameData.Aliases[1] = "street";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "james";
Room->Area = MakeTAID(0);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14873456 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14873456);
Assert(14873565 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14873565);
Room->Items = MakeFullArray<ta_id>(Memory, 3);
Room->Items[0] = MakeTAID(2497119009188);
Room->Items[1] = MakeTAID(2497119009160);
Room->Items[2] = MakeTAID(2497119009212);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119009252);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007896);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119009272);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[32] = MakeTAID(2497119010512);
TA->RoomTable.Hashes[32] = 2497119010512;
ta_room *Room = &TA->RoomTable.Values[32];
Room->NameData.Name = "Cathedral organ console";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "console";
Room->NameData.Aliases[1] = "organ";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "organ";
Room->NameData.Adjectives[2] = "church";
Room->Area = MakeTAID(2497119007756);
Room->Tag = MakeAssetTag((asset_tag_id)11, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14873715 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14873715);
Assert(14873909 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14873909);
Assert(14873989 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14873989);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2497119010600);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119010668);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)11, (asset_tag_id)17, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)2497119010488);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119006772);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[33] = MakeTAID(2497119008856);
TA->RoomTable.Hashes[33] = 2497119008856;
ta_room *Room = &TA->RoomTable.Values[33];
Room->NameData.Name = "Shop front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "shop";
Room->NameData.Aliases[1] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "shop";
Room->Area = MakeTAID(2497119007924);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14874149 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14874149);
Assert(14874316 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14874316);
Assert(14874483 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14874483);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119007864);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119008840);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007924);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119008956);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[34] = MakeTAID(2497119010192);
TA->RoomTable.Hashes[34] = 2497119010192;
ta_room *Room = &TA->RoomTable.Values[34];
Room->NameData.Name = "Inn lobby";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "inn";
Room->NameData.Aliases[1] = "lobby";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "inn";
Room->Area = MakeTAID(2497119007848);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14874498 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14874498);
Assert(14874758 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14874758);
Assert(14874767 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14874767);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2497119010056);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119009028);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2497119010212);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[35] = MakeTAID(2497119010328);
TA->RoomTable.Hashes[35] = 2497119010328;
ta_room *Room = &TA->RoomTable.Values[35];
Room->NameData.Name = "Bar billiard room";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "billiard";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "bar";
Room->NameData.Adjectives[1] = "billiard";
Room->Area = MakeTAID(2497119007740);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14874782 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14874782);
Assert(14874808 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14874808);
Assert(14874817 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14874817);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2497119007740);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[36] = MakeTAID(2497119010284);
TA->RoomTable.Hashes[36] = 2497119010284;
ta_room *Room = &TA->RoomTable.Values[36];
Room->NameData.Name = "Inn room 3";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "3";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "inn";
Room->NameData.Adjectives[1] = "room";
Room->Area = MakeTAID(2497119007848);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14874832 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14874832);
Assert(14874878 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14874878);
Assert(14874887 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14874887);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2497119010172);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119010212);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[37] = MakeTAID(2497119009272);
TA->RoomTable.Hashes[37] = 2497119009272;
ta_room *Room = &TA->RoomTable.Values[37];
Room->NameData.Name = "Workshop front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Aliases[0] = "workshop";
Room->NameData.Aliases[1] = "work";
Room->NameData.Aliases[2] = "shop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "work";
Room->Area = MakeTAID(0);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14874902 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14874902);
Assert(14875081 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14875081);
Room->Items = MakeFullArray<ta_id>(Memory, 2);
Room->Items[0] = MakeTAID(2497119009288);
Room->Items[1] = MakeTAID(2497119009348);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119008992);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119009552);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[38] = MakeTAID(2497119009552);
TA->RoomTable.Hashes[38] = 2497119009552;
ta_room *Room = &TA->RoomTable.Values[38];
Room->NameData.Name = "Workshop";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "workshop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Room->Area = MakeTAID(0);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14875096 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14875096);
Assert(14875148 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14875148);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119009272);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[39] = MakeTAID(2497119007896);
TA->RoomTable.Hashes[39] = 2497119007896;
ta_room *Room = &TA->RoomTable.Values[39];
Room->NameData.Name = "Northwest plaza";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "plaza";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 4);
Room->NameData.Adjectives[0] = "nw";
Room->NameData.Adjectives[1] = "northwest";
Room->NameData.Adjectives[2] = "north";
Room->NameData.Adjectives[3] = "west";
Room->Area = MakeTAID(2497119007896);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14875163 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14875163);
Assert(14875286 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14875286);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119008992);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007880);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[40] = MakeTAID(2497119010244);
TA->RoomTable.Hashes[40] = 2497119010244;
ta_room *Room = &TA->RoomTable.Values[40];
Room->NameData.Name = "Inn room 1";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "1";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "inn";
Room->NameData.Adjectives[1] = "room";
Room->Area = MakeTAID(2497119007848);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14875397 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14875397);
Assert(14875641 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14875641);
Assert(14875650 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14875650);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2497119010140);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119010212);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[41] = MakeTAID(2497119007944);
TA->RoomTable.Hashes[41] = 2497119007944;
ta_room *Room = &TA->RoomTable.Values[41];
Room->NameData.Name = "East Thorn Lane";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "thorn";
Room->NameData.Aliases[1] = "lane";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "e";
Room->NameData.Adjectives[1] = "east";
Room->NameData.Adjectives[2] = "thorn";
Room->Area = MakeTAID(2497119007944);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14875665 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14875665);
Assert(14875689 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14875689);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119009028);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119007880);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119009040);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2497119007932);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[42] = MakeTAID(2497119007808);
TA->RoomTable.Hashes[42] = 2497119007808;
ta_room *Room = &TA->RoomTable.Values[42];
Room->NameData.Name = "Garden tree";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "tree";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "garden";
Room->Area = MakeTAID(2497119007808);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14875750 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14875750);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119007836);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2497119007820);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007796);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[43] = MakeTAID(2497119010012);
TA->RoomTable.Hashes[43] = 2497119010012;
ta_room *Room = &TA->RoomTable.Values[43];
Room->NameData.Name = "Plant shop greenhouse";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "greenhouse";
Room->NameData.Aliases[1] = "house";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "plant";
Room->NameData.Adjectives[1] = "shop";
Room->NameData.Adjectives[2] = "green";
Room->Area = MakeTAID(2497119007852);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14875770 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14875770);
Assert(14875789 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14875789);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119007852);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[44] = MakeTAID(2497119009052);
TA->RoomTable.Hashes[44] = 2497119009052;
ta_room *Room = &TA->RoomTable.Values[44];
Room->NameData.Name = "Tailor shop front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Aliases[0] = "tailor";
Room->NameData.Aliases[1] = "shop";
Room->NameData.Aliases[2] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "tailor";
Room->NameData.Adjectives[1] = "shop";
Room->Area = MakeTAID(2497119007976);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14875886 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14875886);
Assert(14876054 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14876054);
Assert(14876063 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14876063);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2497119007932);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2497119010388);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[45] = MakeTAID(2497119010844);
TA->RoomTable.Hashes[45] = 2497119010844;
ta_room *Room = &TA->RoomTable.Values[45];
Room->NameData.Name = "Bell tower belfrey";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "belfrey";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "bell";
Room->NameData.Adjectives[1] = "tower";
Room->Area = MakeTAID(2497119007744);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14876078 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14876078);
Assert(14876087 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14876087);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2497119010872);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2497119010804);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
TA->ItemNameTable = MakeHashTable<const char *, ta_id>(Memory, ITEM_TABLE_SIZE);
TA->ItemTable.BucketsUsed = 45;
{
HashTableInsert(&TA->ItemNameTable, "carrot cake muffins", MakeTAID(2497119008084));
TA->ItemTable.Keys[0] = MakeTAID(2497119008084);
TA->ItemTable.Hashes[0] = 2497119008084;
ta_item *Item = &TA->ItemTable.Values[0];
Item->NameData.Name = "carrot cake muffins";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Aliases[0] = "muffin";
Item->NameData.Aliases[1] = "muffins";
Item->NameData.Aliases[2] = "cake";
Item->NameData.Aliases[3] = "cakes";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "carrot";
Item->NameData.Adjectives[1] = "cake";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 2;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14876096 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14876096);
Assert(14876170 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14876170);
Assert(14876244 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14876244);
}
{
HashTableInsert(&TA->ItemNameTable, "lush green plants", MakeTAID(2497119009976));
TA->ItemTable.Keys[1] = MakeTAID(2497119009976);
TA->ItemTable.Hashes[1] = 2497119009976;
ta_item *Item = &TA->ItemTable.Values[1];
Item->NameData.Name = "lush green plants";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "plants";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "lush";
Item->NameData.Adjectives[1] = "green";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14876272 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14876272);
}
{
HashTableInsert(&TA->ItemNameTable, "James street bell tower", MakeTAID(2497119009212));
TA->ItemTable.Keys[2] = MakeTAID(2497119009212);
TA->ItemTable.Hashes[2] = 2497119009212;
ta_item *Item = &TA->ItemTable.Values[2];
Item->NameData.Name = "James street bell tower";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "bell";
Item->NameData.Aliases[1] = "tower";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "bell";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14876345 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14876345);
}
{
HashTableInsert(&TA->ItemNameTable, "Workshop front workers", MakeTAID(2497119009348));
TA->ItemTable.Keys[3] = MakeTAID(2497119009348);
TA->ItemTable.Hashes[3] = 2497119009348;
ta_item *Item = &TA->ItemTable.Values[3];
Item->NameData.Name = "Workshop front workers";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Aliases[0] = "workers";
Item->NameData.Aliases[1] = "men";
Item->NameData.Aliases[2] = "women";
Item->NameData.Aliases[3] = "people";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "muscular";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14876426 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14876426);
}
{
HashTableInsert(&TA->ItemNameTable, "bread crumbs", MakeTAID(2497119008404));
TA->ItemTable.Keys[4] = MakeTAID(2497119008404);
TA->ItemTable.Hashes[4] = 2497119008404;
ta_item *Item = &TA->ItemTable.Values[4];
Item->NameData.Name = "bread crumbs";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "crumb";
Item->NameData.Aliases[1] = "crumbs";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "bread";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14876538 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14876538);
Assert(14876597 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14876597);
Assert(14876667 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14876667);
}
{
HashTableInsert(&TA->ItemNameTable, "garden shovel", MakeTAID(2497119009616));
TA->ItemTable.Keys[5] = MakeTAID(2497119009616);
TA->ItemTable.Hashes[5] = 2497119009616;
ta_item *Item = &TA->ItemTable.Values[5];
Item->NameData.Name = "garden shovel";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "shovel";
Item->NameData.Aliases[1] = "shovels";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "garden";
Item->NameData.Adjectives[1] = "gardening";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 5;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14876688 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14876688);
}
{
HashTableInsert(&TA->ItemNameTable, "plant pot", MakeTAID(2497119009576));
TA->ItemTable.Keys[6] = MakeTAID(2497119009576);
TA->ItemTable.Hashes[6] = 2497119009576;
ta_item *Item = &TA->ItemTable.Values[6];
Item->NameData.Name = "plant pot";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "pot";
Item->NameData.Aliases[1] = "pots";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "plant";
Item->NameData.Adjectives[1] = "plants";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 3;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14876766 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14876766);
}
{
HashTableInsert(&TA->ItemNameTable, "dainty philodendron micans", MakeTAID(2497119009888));
TA->ItemTable.Keys[7] = MakeTAID(2497119009888);
TA->ItemTable.Hashes[7] = 2497119009888;
ta_item *Item = &TA->ItemTable.Values[7];
Item->NameData.Name = "dainty philodendron micans";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Aliases[0] = "philodendron";
Item->NameData.Aliases[1] = "micans";
Item->NameData.Aliases[2] = "plant";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "dainty";
Item->NameData.Adjectives[1] = "philodendron";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14876817 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14876817);
}
{
HashTableInsert(&TA->ItemNameTable, "garden gloves", MakeTAID(2497119009668));
TA->ItemTable.Keys[8] = MakeTAID(2497119009668);
TA->ItemTable.Hashes[8] = 2497119009668;
ta_item *Item = &TA->ItemTable.Values[8];
Item->NameData.Name = "garden gloves";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "glove";
Item->NameData.Aliases[1] = "gloves";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "garden";
Item->NameData.Adjectives[1] = "gardening";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 4;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14876893 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14876893);
}
{
HashTableInsert(&TA->ItemNameTable, "Southwest plaza bell tower", MakeTAID(2497119008904));
TA->ItemTable.Keys[9] = MakeTAID(2497119008904);
TA->ItemTable.Hashes[9] = 2497119008904;
ta_item *Item = &TA->ItemTable.Values[9];
Item->NameData.Name = "Southwest plaza bell tower";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "bell";
Item->NameData.Aliases[1] = "tower";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "bell";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14877005 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14877005);
}
{
HashTableInsert(&TA->ItemNameTable, "silvery scindapsus", MakeTAID(2497119009848));
TA->ItemTable.Keys[10] = MakeTAID(2497119009848);
TA->ItemTable.Hashes[10] = 2497119009848;
ta_item *Item = &TA->ItemTable.Values[10];
Item->NameData.Name = "silvery scindapsus";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "scindapsus";
Item->NameData.Aliases[1] = "plant";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "silvery";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14877104 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14877104);
}
{
HashTableInsert(&TA->ItemNameTable, "Workshop front building", MakeTAID(2497119009488));
TA->ItemTable.Keys[11] = MakeTAID(2497119009488);
TA->ItemTable.Hashes[11] = 2497119009488;
ta_item *Item = &TA->ItemTable.Values[11];
Item->NameData.Name = "Workshop front building";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "building";
Item->NameData.Aliases[1] = "workshop";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "workshop";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14877175 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14877175);
}
{
HashTableInsert(&TA->ItemNameTable, "a lantern", MakeTAID(2497119008052));
TA->ItemTable.Keys[12] = MakeTAID(2497119008052);
TA->ItemTable.Hashes[12] = 2497119008052;
ta_item *Item = &TA->ItemTable.Values[12];
Item->NameData.Name = "a lantern";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "lantern";
Item->NameData.Aliases[1] = "lanterns";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)28, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 10;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14877262 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14877262);
Assert(14877376 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14877376);
Assert(14877451 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14877451);
}
{
HashTableInsert(&TA->ItemNameTable, "Ghost coin", MakeTAID(2497119008592));
TA->ItemTable.Keys[13] = MakeTAID(2497119008592);
TA->ItemTable.Hashes[13] = 2497119008592;
ta_item *Item = &TA->ItemTable.Values[13];
Item->NameData.Name = "Ghost coin";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "coin";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "ghost";
Item->Tag  = MakeAssetTag((asset_tag_id)31, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14877469 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14877469);
}
{
HashTableInsert(&TA->ItemNameTable, "honeyed almond pastries", MakeTAID(2497119008144));
TA->ItemTable.Keys[14] = MakeTAID(2497119008144);
TA->ItemTable.Hashes[14] = 2497119008144;
ta_item *Item = &TA->ItemTable.Values[14];
Item->NameData.Name = "honeyed almond pastries";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "pastry";
Item->NameData.Aliases[1] = "pastries";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "honeyed";
Item->NameData.Adjectives[1] = "almond";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 3;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14877478 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14877478);
Assert(14877599 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14877599);
Assert(14877709 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14877709);
}
{
HashTableInsert(&TA->ItemNameTable, "large loaves of wheat bread", MakeTAID(2497119008324));
TA->ItemTable.Keys[15] = MakeTAID(2497119008324);
TA->ItemTable.Hashes[15] = 2497119008324;
ta_item *Item = &TA->ItemTable.Values[15];
Item->NameData.Name = "large loaves of wheat bread";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Aliases[0] = "bread";
Item->NameData.Aliases[1] = "loaf";
Item->NameData.Aliases[2] = "loafs";
Item->NameData.Aliases[3] = "loaves";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Adjectives[0] = "large";
Item->NameData.Adjectives[1] = "wheat";
Item->NameData.Adjectives[2] = "loaves";
Item->NameData.Adjectives[3] = "of";
Item->Tag  = MakeAssetTag((asset_tag_id)30, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 4;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14877741 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14877741);
Assert(14877790 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14877790);
Assert(14877951 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14877951);
}
{
HashTableInsert(&TA->ItemNameTable, "a town map", MakeTAID(2497119007984));
TA->ItemTable.Keys[16] = MakeTAID(2497119007984);
TA->ItemTable.Hashes[16] = 2497119007984;
ta_item *Item = &TA->ItemTable.Values[16];
Item->NameData.Name = "a town map";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "map";
Item->NameData.Aliases[1] = "maps";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "town";
Item->Tag  = MakeAssetTag((asset_tag_id)27, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 5;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14877987 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14877987);
}
{
HashTableInsert(&TA->ItemNameTable, "organ bellows static", MakeTAID(2497119010420));
TA->ItemTable.Keys[17] = MakeTAID(2497119010420);
TA->ItemTable.Hashes[17] = 2497119010420;
ta_item *Item = &TA->ItemTable.Values[17];
Item->NameData.Name = "organ bellows static";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "bellow";
Item->NameData.Aliases[1] = "bellows";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "organ";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)15, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14878126 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14878126);
Assert(14878280 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14878280);
Assert(14878319 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14878319);
Assert(14878330 < DataSize);
Item->Datas[3] = (ta_data *)((u8 *)Data+14878330);
}
{
HashTableInsert(&TA->ItemNameTable, "ferns", MakeTAID(2497119009948));
TA->ItemTable.Keys[18] = MakeTAID(2497119009948);
TA->ItemTable.Hashes[18] = 2497119009948;
ta_item *Item = &TA->ItemTable.Values[18];
Item->NameData.Name = "ferns";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "fern";
Item->NameData.Aliases[1] = "ferns";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14878341 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14878341);
}
{
HashTableInsert(&TA->ItemNameTable, "Southwest plaza cathedral", MakeTAID(2497119008868));
TA->ItemTable.Keys[19] = MakeTAID(2497119008868);
TA->ItemTable.Hashes[19] = 2497119008868;
ta_item *Item = &TA->ItemTable.Values[19];
Item->NameData.Name = "Southwest plaza cathedral";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "cathedral";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "small";
Item->NameData.Adjectives[1] = "side";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14878412 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14878412);
}
{
HashTableInsert(&TA->ItemNameTable, "room 3 window", MakeTAID(2497119010172));
TA->ItemTable.Keys[20] = MakeTAID(2497119010172);
TA->ItemTable.Hashes[20] = 2497119010172;
ta_item *Item = &TA->ItemTable.Values[20];
Item->NameData.Name = "room 3 window";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "window";
Item->NameData.Aliases[1] = "windows";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14878602 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14878602);
}
{
HashTableInsert(&TA->ItemNameTable, "an umbrella", MakeTAID(2497119008016));
TA->ItemTable.Keys[21] = MakeTAID(2497119008016);
TA->ItemTable.Hashes[21] = 2497119008016;
ta_item *Item = &TA->ItemTable.Values[21];
Item->NameData.Name = "an umbrella";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "umbrella";
Item->NameData.Aliases[1] = "umbrellas";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 7;
Item->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14878844 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14878844);
Assert(14878897 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14878897);
}
{
HashTableInsert(&TA->ItemNameTable, "small silver key", MakeTAID(2497119008512));
TA->ItemTable.Keys[22] = MakeTAID(2497119008512);
TA->ItemTable.Hashes[22] = 2497119008512;
ta_item *Item = &TA->ItemTable.Values[22];
Item->NameData.Name = "small silver key";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "key";
Item->NameData.Aliases[1] = "keys";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "small";
Item->NameData.Adjectives[1] = "silver";
Item->Tag  = MakeAssetTag((asset_tag_id)11, (asset_tag_id)26, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14878915 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14878915);
}
{
HashTableInsert(&TA->ItemNameTable, "Workshop front ceramic tiles", MakeTAID(2497119009412));
TA->ItemTable.Keys[23] = MakeTAID(2497119009412);
TA->ItemTable.Hashes[23] = 2497119009412;
ta_item *Item = &TA->ItemTable.Values[23];
Item->NameData.Name = "Workshop front ceramic tiles";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "ceramic";
Item->NameData.Aliases[1] = "tiles";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Adjectives[0] = "ceramic";
Item->NameData.Adjectives[1] = "blue";
Item->NameData.Adjectives[2] = "glazed";
Item->NameData.Adjectives[3] = "beautiful";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14878970 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14878970);
}
{
HashTableInsert(&TA->ItemNameTable, "Southeast plaza oak trees", MakeTAID(2497119008648));
TA->ItemTable.Keys[24] = MakeTAID(2497119008648);
TA->ItemTable.Hashes[24] = 2497119008648;
ta_item *Item = &TA->ItemTable.Values[24];
Item->NameData.Name = "Southeast plaza oak trees";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "trees";
Item->NameData.Aliases[1] = "oak";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Adjectives[0] = "looming";
Item->NameData.Adjectives[1] = "tall";
Item->NameData.Adjectives[2] = "oak";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14879069 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14879069);
}
{
HashTableInsert(&TA->ItemNameTable, "James street cathedral", MakeTAID(2497119009188));
TA->ItemTable.Keys[25] = MakeTAID(2497119009188);
TA->ItemTable.Hashes[25] = 2497119009188;
ta_item *Item = &TA->ItemTable.Values[25];
Item->NameData.Name = "James street cathedral";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "cathedral";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14879199 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14879199);
}
{
HashTableInsert(&TA->ItemNameTable, "bell tower key", MakeTAID(2497119008560));
TA->ItemTable.Keys[26] = MakeTAID(2497119008560);
TA->ItemTable.Hashes[26] = 2497119008560;
ta_item *Item = &TA->ItemTable.Values[26];
Item->NameData.Name = "bell tower key";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "key";
Item->NameData.Aliases[1] = "keys";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "bell";
Item->NameData.Adjectives[1] = "tower";
Item->Tag  = MakeAssetTag((asset_tag_id)12, (asset_tag_id)26, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14879342 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14879342);
}
{
HashTableInsert(&TA->ItemNameTable, "pretty black cat", MakeTAID(2497119010092));
TA->ItemTable.Keys[27] = MakeTAID(2497119010092);
TA->ItemTable.Hashes[27] = 2497119010092;
ta_item *Item = &TA->ItemTable.Values[27];
Item->NameData.Name = "pretty black cat";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "cat";
Item->NameData.Aliases[1] = "cats";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "pretty";
Item->NameData.Adjectives[1] = "black";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14879408 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14879408);
Assert(14879474 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14879474);
}
{
HashTableInsert(&TA->ItemNameTable, "rusty doorknob", MakeTAID(2497119009776));
TA->ItemTable.Keys[28] = MakeTAID(2497119009776);
TA->ItemTable.Hashes[28] = 2497119009776;
ta_item *Item = &TA->ItemTable.Values[28];
Item->NameData.Name = "rusty doorknob";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Aliases[0] = "doorknob";
Item->NameData.Aliases[1] = "doorknobs";
Item->NameData.Aliases[2] = "knob";
Item->NameData.Aliases[3] = "knobs";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "rusty";
Item->NameData.Adjectives[1] = "door";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14879522 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14879522);
}
{
HashTableInsert(&TA->ItemNameTable, "cinnamon sugar churros", MakeTAID(2497119008204));
TA->ItemTable.Keys[29] = MakeTAID(2497119008204);
TA->ItemTable.Hashes[29] = 2497119008204;
ta_item *Item = &TA->ItemTable.Values[29];
Item->NameData.Name = "cinnamon sugar churros";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "churro";
Item->NameData.Aliases[1] = "churros";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "cinnamon";
Item->NameData.Adjectives[1] = "sugar";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 1;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14879586 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14879586);
Assert(14879670 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14879670);
Assert(14879708 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14879708);
}
{
HashTableInsert(&TA->ItemNameTable, "room 1 window", MakeTAID(2497119010140));
TA->ItemTable.Keys[30] = MakeTAID(2497119010140);
TA->ItemTable.Hashes[30] = 2497119010140;
ta_item *Item = &TA->ItemTable.Values[30];
Item->NameData.Name = "room 1 window";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "window";
Item->NameData.Aliases[1] = "windows";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14879739 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14879739);
}
{
HashTableInsert(&TA->ItemNameTable, "organ pipes", MakeTAID(2497119008476));
TA->ItemTable.Keys[31] = MakeTAID(2497119008476);
TA->ItemTable.Hashes[31] = 2497119008476;
ta_item *Item = &TA->ItemTable.Values[31];
Item->NameData.Name = "organ pipes";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "pipe";
Item->NameData.Aliases[1] = "pipes";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "organ";
Item->Tag  = MakeAssetTag((asset_tag_id)29, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14879999 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14879999);
Assert(14880019 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14880019);
}
{
HashTableInsert(&TA->ItemNameTable, "Southeast plaza cathedral", MakeTAID(2497119008744));
TA->ItemTable.Keys[32] = MakeTAID(2497119008744);
TA->ItemTable.Hashes[32] = 2497119008744;
ta_item *Item = &TA->ItemTable.Values[32];
Item->NameData.Name = "Southeast plaza cathedral";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "cathedral";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14880042 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14880042);
}
{
HashTableInsert(&TA->ItemNameTable, "Workshop front doors", MakeTAID(2497119009288));
TA->ItemTable.Keys[33] = MakeTAID(2497119009288);
TA->ItemTable.Hashes[33] = 2497119009288;
ta_item *Item = &TA->ItemTable.Values[33];
Item->NameData.Name = "Workshop front doors";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "doors";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Adjectives[0] = "wide";
Item->NameData.Adjectives[1] = "wooden";
Item->NameData.Adjectives[2] = "weathered";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14880047 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14880047);
}
{
HashTableInsert(&TA->ItemNameTable, "calatheas", MakeTAID(2497119009964));
TA->ItemTable.Keys[34] = MakeTAID(2497119009964);
TA->ItemTable.Hashes[34] = 2497119009964;
ta_item *Item = &TA->ItemTable.Values[34];
Item->NameData.Name = "calatheas";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "calatheas";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14880116 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14880116);
}
{
HashTableInsert(&TA->ItemNameTable, "organ pipes static", MakeTAID(2497119010460));
TA->ItemTable.Keys[35] = MakeTAID(2497119010460);
TA->ItemTable.Hashes[35] = 2497119010460;
ta_item *Item = &TA->ItemTable.Values[35];
Item->NameData.Name = "organ pipes static";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "pipe";
Item->NameData.Aliases[1] = "pipes";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "organ";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)15, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14880218 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14880218);
Assert(14880272 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14880272);
Assert(14880310 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14880310);
Assert(14880321 < DataSize);
Item->Datas[3] = (ta_data *)((u8 *)Data+14880321);
}
{
HashTableInsert(&TA->ItemNameTable, "vibrant ceramic plant pot", MakeTAID(2497119010056));
TA->ItemTable.Keys[36] = MakeTAID(2497119010056);
TA->ItemTable.Hashes[36] = 2497119010056;
ta_item *Item = &TA->ItemTable.Values[36];
Item->NameData.Name = "vibrant ceramic plant pot";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "pot";
Item->NameData.Aliases[1] = "pots";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Adjectives[0] = "vibrant";
Item->NameData.Adjectives[1] = "ceramic";
Item->NameData.Adjectives[2] = "plant";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14880332 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14880332);
Assert(14880400 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14880400);
}
{
HashTableInsert(&TA->ItemNameTable, "leather sheet", MakeTAID(2497119008436));
TA->ItemTable.Keys[37] = MakeTAID(2497119008436);
TA->ItemTable.Hashes[37] = 2497119008436;
ta_item *Item = &TA->ItemTable.Values[37];
Item->NameData.Name = "leather sheet";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Aliases[0] = "sheet";
Item->NameData.Aliases[1] = "sheets";
Item->NameData.Aliases[2] = "leather";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "leather";
Item->Tag  = MakeAssetTag((asset_tag_id)29, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14880448 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14880448);
Assert(14880530 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14880530);
}
{
HashTableInsert(&TA->ItemNameTable, "Southeast plaza ground", MakeTAID(2497119008704));
TA->ItemTable.Keys[38] = MakeTAID(2497119008704);
TA->ItemTable.Hashes[38] = 2497119008704;
ta_item *Item = &TA->ItemTable.Values[38];
Item->NameData.Name = "Southeast plaza ground";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "ground";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "damp";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14880555 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14880555);
}
{
HashTableInsert(&TA->ItemNameTable, "dark rugged door", MakeTAID(2497119009740));
TA->ItemTable.Keys[39] = MakeTAID(2497119009740);
TA->ItemTable.Hashes[39] = 2497119009740;
ta_item *Item = &TA->ItemTable.Values[39];
Item->NameData.Name = "dark rugged door";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "door";
Item->NameData.Aliases[1] = "doors";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "dark";
Item->NameData.Adjectives[1] = "rugged";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14880620 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14880620);
}
{
HashTableInsert(&TA->ItemNameTable, "James street bushes", MakeTAID(2497119009160));
TA->ItemTable.Keys[40] = MakeTAID(2497119009160);
TA->ItemTable.Hashes[40] = 2497119009160;
ta_item *Item = &TA->ItemTable.Values[40];
Item->NameData.Name = "James street bushes";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "bushes";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "large";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14880652 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14880652);
}
{
HashTableInsert(&TA->ItemNameTable, "mess of vines", MakeTAID(2497119009700));
TA->ItemTable.Keys[41] = MakeTAID(2497119009700);
TA->ItemTable.Hashes[41] = 2497119009700;
ta_item *Item = &TA->ItemTable.Values[41];
Item->NameData.Name = "mess of vines";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "vine";
Item->NameData.Aliases[1] = "vines";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "mess";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14880737 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14880737);
}
{
HashTableInsert(&TA->ItemNameTable, "organ console static", MakeTAID(2497119010600));
TA->ItemTable.Keys[42] = MakeTAID(2497119010600);
TA->ItemTable.Hashes[42] = 2497119010600;
ta_item *Item = &TA->ItemTable.Values[42];
Item->NameData.Name = "organ console static";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Aliases[0] = "organ";
Item->NameData.Aliases[1] = "organs";
Item->NameData.Aliases[2] = "console";
Item->NameData.Aliases[3] = "consoles";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Adjectives[0] = "organ";
Item->NameData.Adjectives[1] = "once";
Item->NameData.Adjectives[2] = "great";
Item->Tag  = MakeAssetTag((asset_tag_id)11, (asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 6);
Assert(14880786 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14880786);
Assert(14881014 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14881014);
Assert(14881197 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14881197);
Assert(14881282 < DataSize);
Item->Datas[3] = (ta_data *)((u8 *)Data+14881282);
Assert(14881329 < DataSize);
Item->Datas[4] = (ta_data *)((u8 *)Data+14881329);
Assert(14881340 < DataSize);
Item->Datas[5] = (ta_data *)((u8 *)Data+14881340);
}
{
HashTableInsert(&TA->ItemNameTable, "Albert (Ghost)", MakeTAID(2497119008620));
TA->ItemTable.Keys[43] = MakeTAID(2497119008620);
TA->ItemTable.Hashes[43] = 2497119008620;
ta_item *Item = &TA->ItemTable.Values[43];
Item->NameData.Name = "Albert (Ghost)";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Aliases[0] = "albert";
Item->NameData.Aliases[1] = "ghost";
Item->NameData.Aliases[2] = "fog";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)32, (asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14881351 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14881351);
Assert(14881503 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14881503);
}
{
HashTableInsert(&TA->ItemNameTable, "chocolate croissants", MakeTAID(2497119008264));
TA->ItemTable.Keys[44] = MakeTAID(2497119008264);
TA->ItemTable.Hashes[44] = 2497119008264;
ta_item *Item = &TA->ItemTable.Values[44];
Item->NameData.Name = "chocolate croissants";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "croissant";
Item->NameData.Aliases[1] = "croissants";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "chocolate";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 2;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14881595 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14881595);
Assert(14881711 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14881711);
Assert(14881757 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14881757);
}
{
Assert(14881786 < DataSize);
u8 *Pixels = ((u8 *)Data+14881786);
TA->Map.Texture = MakeTexture();
TextureUpload(TA->Map.Texture, Pixels, 128, 104, 4);
TA->Map.Size = V2(128.000000, 104.000000);
TA->Map.Areas = MakeFullArray<ta_area>(Memory, 22);
TA->Map.Areas[0] = MakeTAArea(MakeTAID((u64)2497119007720), V2(79.000000, 75.000000));
TA->Map.Areas[1] = MakeTAArea(MakeTAID((u64)2497119007732), V2(103.000000, 41.000000));
TA->Map.Areas[2] = MakeTAArea(MakeTAID((u64)2497119007740), V2(83.000000, 31.000000));
TA->Map.Areas[3] = MakeTAArea(MakeTAID((u64)2497119007744), V2(87.000000, 57.000000));
TA->Map.Areas[4] = MakeTAArea(MakeTAID((u64)2497119007756), V2(94.000000, 52.000000));
TA->Map.Areas[5] = MakeTAArea(MakeTAID((u64)2497119007768), V2(45.000000, 21.000000));
TA->Map.Areas[6] = MakeTAArea(MakeTAID((u64)2497119007784), V2(59.000000, 53.000000));
TA->Map.Areas[7] = MakeTAArea(MakeTAID((u64)2497119007796), V2(106.000000, 50.000000));
TA->Map.Areas[8] = MakeTAArea(MakeTAID((u64)2497119007808), V2(107.000000, 56.000000));
TA->Map.Areas[9] = MakeTAArea(MakeTAID((u64)2497119007820), V2(115.000000, 56.000000));
TA->Map.Areas[10] = MakeTAArea(MakeTAID((u64)2497119007836), V2(109.000000, 67.000000));
TA->Map.Areas[11] = MakeTAArea(MakeTAID((u64)2497119007848), V2(71.000000, 44.000000));
TA->Map.Areas[12] = MakeTAArea(MakeTAID((u64)2497119007852), V2(60.000000, 60.000000));
TA->Map.Areas[13] = MakeTAArea(MakeTAID((u64)2497119007864), V2(93.000000, 41.000000));
TA->Map.Areas[14] = MakeTAArea(MakeTAID((u64)2497119007880), V2(83.000000, 43.000000));
TA->Map.Areas[15] = MakeTAArea(MakeTAID((u64)2497119007896), V2(84.000000, 48.000000));
TA->Map.Areas[16] = MakeTAArea(MakeTAID((u64)2497119007912), V2(45.000000, 45.000000));
TA->Map.Areas[17] = MakeTAArea(MakeTAID((u64)2497119007924), V2(93.000000, 31.000000));
TA->Map.Areas[18] = MakeTAArea(MakeTAID((u64)2497119007932), V2(61.000000, 35.000000));
TA->Map.Areas[19] = MakeTAArea(MakeTAID((u64)2497119007944), V2(72.000000, 38.000000));
TA->Map.Areas[20] = MakeTAArea(MakeTAID((u64)2497119007960), V2(47.000000, 36.000000));
TA->Map.Areas[21] = MakeTAArea(MakeTAID((u64)2497119007976), V2(61.000000, 27.000000));
}
}
#endif // GENERATED_ASSET_DATA_H
