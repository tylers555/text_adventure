#if !defined(GENERATED_ASSET_DATA_H) && defined(SNAIL_JUMPY_USE_PROCESSED_ASSETS)
#define GENERATED_ASSET_DATA_H
internal inline void
InitializeProcessedAssets(asset_system *Assets, void *Data, u32 DataSize){
ta_system *TA = &TextAdventure;
memory_arena *Memory = &Assets->Memory;
Assets->SoundEffects[1].Sound.ChannelCount = 2;
Assets->SoundEffects[1].Sound.SampleCount  = 2013;
Assets->SoundEffects[1].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[1].VolumeMultiplier   = 1.000000f;
Assert(4 < DataSize);
Assets->SoundEffects[1].Sound.Samples = (s16 *)((u8 *)Data+4);
Assets->SoundEffects[2].Sound.ChannelCount = 2;
Assets->SoundEffects[2].Sound.SampleCount  = 26368;
Assets->SoundEffects[2].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[2].VolumeMultiplier   = 1.000000f;
Assert(8056 < DataSize);
Assets->SoundEffects[2].Sound.Samples = (s16 *)((u8 *)Data+8056);
Assets->SoundEffects[3].Sound.ChannelCount = 2;
Assets->SoundEffects[3].Sound.SampleCount  = 2913408;
Assets->SoundEffects[3].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[3].VolumeMultiplier   = 1.000000f;
Assert(113528 < DataSize);
Assets->SoundEffects[3].Sound.Samples = (s16 *)((u8 *)Data+113528);
Assets->SoundEffects[4].Sound.ChannelCount = 2;
Assets->SoundEffects[4].Sound.SampleCount  = 64000;
Assets->SoundEffects[4].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[4].VolumeMultiplier   = 1.000000f;
Assert(11767160 < DataSize);
Assets->SoundEffects[4].Sound.Samples = (s16 *)((u8 *)Data+11767160);
Assets->SoundEffects[5].Sound.ChannelCount = 2;
Assets->SoundEffects[5].Sound.SampleCount  = 38790;
Assets->SoundEffects[5].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[5].VolumeMultiplier   = 1.000000f;
Assert(12023160 < DataSize);
Assets->SoundEffects[5].Sound.Samples = (s16 *)((u8 *)Data+12023160);
Assets->SoundEffects[6].Sound.ChannelCount = 2;
Assets->SoundEffects[6].Sound.SampleCount  = 35296;
Assets->SoundEffects[6].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[6].VolumeMultiplier   = 1.000000f;
Assert(12178320 < DataSize);
Assets->SoundEffects[6].Sound.Samples = (s16 *)((u8 *)Data+12178320);
Assets->SoundEffects[7].Sound.ChannelCount = 2;
Assets->SoundEffects[7].Sound.SampleCount  = 33075;
Assets->SoundEffects[7].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[7].VolumeMultiplier   = 1.000000f;
Assert(12319504 < DataSize);
Assets->SoundEffects[7].Sound.Samples = (s16 *)((u8 *)Data+12319504);
Assets->SoundEffects[8].Sound.ChannelCount = 2;
Assets->SoundEffects[8].Sound.SampleCount  = 43715;
Assets->SoundEffects[8].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[8].VolumeMultiplier   = 1.000000f;
Assert(12451804 < DataSize);
Assets->SoundEffects[8].Sound.Samples = (s16 *)((u8 *)Data+12451804);
Assets->SoundEffects[9].Sound.ChannelCount = 2;
Assets->SoundEffects[9].Sound.SampleCount  = 358272;
Assets->SoundEffects[9].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[9].VolumeMultiplier   = 1.000000f;
Assert(12626664 < DataSize);
Assets->SoundEffects[9].Sound.Samples = (s16 *)((u8 *)Data+12626664);
Assets->SoundEffects[10].Sound.ChannelCount = 2;
Assets->SoundEffects[10].Sound.SampleCount  = 37948;
Assets->SoundEffects[10].Sound.BaseSpeed    = 1.000000f;
Assets->SoundEffects[10].VolumeMultiplier   = 1.000000f;
Assert(14059752 < DataSize);
Assets->SoundEffects[10].Sound.Samples = (s16 *)((u8 *)Data+14059752);
Assets->SoundEffects[11].Sound.ChannelCount = 2;
Assets->SoundEffects[11].Sound.SampleCount  = 38656;
Assets->SoundEffects[11].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[11].VolumeMultiplier   = 1.000000f;
Assert(14211544 < DataSize);
Assets->SoundEffects[11].Sound.Samples = (s16 *)((u8 *)Data+14211544);
Assets->SoundEffects[12].Sound.ChannelCount = 2;
Assets->SoundEffects[12].Sound.SampleCount  = 27562;
Assets->SoundEffects[12].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[12].VolumeMultiplier   = 1.000000f;
Assert(14366168 < DataSize);
Assets->SoundEffects[12].Sound.Samples = (s16 *)((u8 *)Data+14366168);
Assets->SoundEffects[13].Sound.ChannelCount = 2;
Assets->SoundEffects[13].Sound.SampleCount  = 28160;
Assets->SoundEffects[13].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[13].VolumeMultiplier   = 1.000000f;
Assert(14476416 < DataSize);
Assets->SoundEffects[13].Sound.Samples = (s16 *)((u8 *)Data+14476416);
Assets->SoundEffects[14].Sound.ChannelCount = 2;
Assets->SoundEffects[14].Sound.SampleCount  = 27562;
Assets->SoundEffects[14].Sound.BaseSpeed    = 0.918750f;
Assets->SoundEffects[14].VolumeMultiplier   = 1.000000f;
Assert(14589056 < DataSize);
Assets->SoundEffects[14].Sound.Samples = (s16 *)((u8 *)Data+14589056);
{
Assets->Fonts[1].Size    = V2S(64, 72);
Assets->Fonts[1].Height  = 7.000000;
Assets->Fonts[1].Descent = 2.000000;
Assert(14699304 < DataSize);
CopyMemory(Assets->Fonts[1].Table, ((u8 *)Data+14699304), sizeof(Assets->Fonts[1].Table));
Assert(14700840 < DataSize);
u8 *Pixels = ((u8 *)Data+14700840);
Assets->Fonts[1].Texture = MakeTexture();
TextureUpload(Assets->Fonts[1].Texture, Pixels, 64, 72, 4);
}
{
Assets->Fonts[2].Size    = V2S(50, 49);
Assets->Fonts[2].Height  = 5.000000;
Assets->Fonts[2].Descent = 0.000000;
Assert(14719272 < DataSize);
CopyMemory(Assets->Fonts[2].Table, ((u8 *)Data+14719272), sizeof(Assets->Fonts[2].Table));
Assert(14720808 < DataSize);
u8 *Pixels = ((u8 *)Data+14720808);
Assets->Fonts[2].Texture = MakeTexture();
TextureUpload(Assets->Fonts[2].Texture, Pixels, 50, 49, 4);
}
{
Assets->Fonts[3].Size    = V2S(50, 49);
Assets->Fonts[3].Height  = 5.000000;
Assets->Fonts[3].Descent = 0.000000;
Assert(14730608 < DataSize);
CopyMemory(Assets->Fonts[3].Table, ((u8 *)Data+14730608), sizeof(Assets->Fonts[3].Table));
Assert(14732144 < DataSize);
u8 *Pixels = ((u8 *)Data+14732144);
Assets->Fonts[3].Texture = MakeTexture();
TextureUpload(Assets->Fonts[3].Texture, Pixels, 50, 49, 4);
}
{
Assets->Fonts[4].Size    = V2S(45, 27);
Assets->Fonts[4].Height  = 5.000000;
Assets->Fonts[4].Descent = 2.000000;
Assert(14741944 < DataSize);
CopyMemory(Assets->Fonts[4].Table, ((u8 *)Data+14741944), sizeof(Assets->Fonts[4].Table));
Assert(14743480 < DataSize);
u8 *Pixels = ((u8 *)Data+14743480);
Assets->Fonts[4].Texture = MakeTexture();
TextureUpload(Assets->Fonts[4].Texture, Pixels, 45, 27, 4);
}
{
Assets->Fonts[5].Size    = V2S(64, 85);
Assets->Fonts[5].Height  = 15.000000;
Assets->Fonts[5].Descent = 5.000000;
Assert(14748340 < DataSize);
CopyMemory(Assets->Fonts[5].Table, ((u8 *)Data+14748340), sizeof(Assets->Fonts[5].Table));
Assert(14749876 < DataSize);
u8 *Pixels = ((u8 *)Data+14749876);
Assets->Fonts[5].Texture = MakeTexture();
TextureUpload(Assets->Fonts[5].Texture, Pixels, 64, 85, 4);
}
{
Assets->Variables[1].S    = "You feel an incredible power flow around you, and the air becomes faintly chilly.";
Assets->Variables[1].TAID = MakeTAID(0);
}
{
Assets->Variables[2].S    = "There is no where to enter!?";
Assets->Variables[2].TAID = MakeTAID(0);
}
{
Assets->Variables[3].S    = "A slight breeze stirs the room.";
Assets->Variables[3].TAID = MakeTAID(0);
}
{
Assets->Variables[4].S    = "Do you want to buy %s, yes or no?";
Assets->Variables[4].TAID = MakeTAID(0);
}
{
Assets->Variables[5].S    = "Nothing really seems to happen.";
Assets->Variables[5].TAID = MakeTAID(0);
}
{
Assets->Variables[6].S    = "Item not bought!";
Assets->Variables[6].TAID = MakeTAID(0);
}
{
Assets->Variables[7].S    = "You're going to have to \002\002buy\002\001 that!";
Assets->Variables[7].TAID = MakeTAID(0);
}
{
Assets->Variables[8].S    = "theme_default";
Assets->Variables[8].TAID = MakeTAID(2686502056004);
}
{
Assets->Variables[9].S    = "Do you want to buy that?";
Assets->Variables[9].TAID = MakeTAID(0);
}
{
Assets->Variables[10].S    = "game";
Assets->Variables[10].TAID = MakeTAID(0);
}
{
Assets->Variables[11].S    = "You couldn't possible hope to buy that!";
Assets->Variables[11].TAID = MakeTAID(0);
}
{
Assets->Variables[12].S    = "You don't have to \002\002buy\002\001 that!";
Assets->Variables[12].TAID = MakeTAID(0);
}
{
Assets->Variables[13].S    = "James street";
Assets->Variables[13].TAID = MakeTAID(2686502056048);
}
{
Assets->Variables[14].S    = "Are you sure you want to buy that?";
Assets->Variables[14].TAID = MakeTAID(0);
}
{
Assets->Variables[15].S    = "You don't have enough \002\002money\002\001 for that!";
Assets->Variables[15].TAID = MakeTAID(0);
}
{
Assets->Variables[16].S    = "That is not a valid command!\n\002\002You fool\002\001!!!";
Assets->Variables[16].TAID = MakeTAID(0);
}
{
Assets->Variables[17].S    = "You can't eat \002\002that\002\001!";
Assets->Variables[17].TAID = MakeTAID(0);
}
{
Assets->Variables[18].S    = "You will have to be more specific, what item do you want to %s\nEnter the item: ";
Assets->Variables[18].TAID = MakeTAID(0);
}
{
Assets->Variables[19].S    = "What do you want to eat!?!?";
Assets->Variables[19].TAID = MakeTAID(0);
}
{
Assets->Variables[20].S    = "This room is much too \002\002small\002\001!";
Assets->Variables[20].TAID = MakeTAID(0);
}
{
Assets->Variables[21].S    = "What do you want to examine?";
Assets->Variables[21].TAID = MakeTAID(0);
}
{
Assets->Variables[22].S    = "I don't know where you want to move! Please be mor specific!";
Assets->Variables[22].TAID = MakeTAID(0);
}
{
Assets->Variables[23].S    = "You can't examine that!";
Assets->Variables[23].TAID = MakeTAID(0);
}
{
Assets->Variables[24].S    = "That way is locked, \002\002buddy-o\002\001!";
Assets->Variables[24].TAID = MakeTAID(0);
}
{
Assets->Variables[25].S    = "That can't be fixed!";
Assets->Variables[25].TAID = MakeTAID(0);
}
{
Assets->Variables[26].S    = "(unlocked)";
Assets->Variables[26].TAID = MakeTAID(0);
}
{
Assets->Variables[27].S    = "That is not broken!";
Assets->Variables[27].TAID = MakeTAID(0);
}
{
Assets->Variables[28].S    = "Why would you want move that way!?\nDoing so would be quite \002\002foolish\002\001!";
Assets->Variables[28].TAID = MakeTAID(0);
}
{
Assets->Variables[29].S    = "I don't know how to use that!";
Assets->Variables[29].TAID = MakeTAID(0);
}
{
Assets->Variables[30].S    = "Don't you understand how to move!?\nYou need to specify a direction or location, \002\002pal\002\001!";
Assets->Variables[30].TAID = MakeTAID(0);
}
{
Assets->Variables[31].S    = "I'm afraid you don't have that!";
Assets->Variables[31].TAID = MakeTAID(0);
}
{
Assets->Variables[32].S    = "Where do you exit to!?";
Assets->Variables[32].TAID = MakeTAID(0);
}
TA->ThemeTable.BucketsUsed = 2;
{
TA->ThemeTable.Keys[0] = MakeTAID(2686502056512);
TA->ThemeTable.Hashes[0] = 2686502056512;
console_theme *Theme = &TA->ThemeTable.Values[0];
Theme->BasicFont = AssetID(font_basic); 
Theme->TitleFont = AssetID(font_basic_bold); 
Theme->BackgroundColor = MakeColor(0.035294f, 0.211765f, 0.039216f, 1.000000f); 
Theme->CursorColor = MakeColor(0.000000f, 0.000000f, 0.000000f, 0.000000f); 
Theme->SelectionColor = MakeColor(0.000000f, 0.000000f, 0.000000f, 0.000000f); 
Theme->BasicFancy = MakeFancyFormat(MakeColor(0.95f, 0.95f, 0.95f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->RoomTitleFancy = MakeFancyFormat(MakeColor(1.00f, 0.41f, 0.41f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 1.00f, 6.28f, 3.14f, 0.00f, 0.00f, 0.00f);
Theme->ItemFancy = MakeFancyFormat(MakeColor(0.14f, 0.89f, 0.89f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->RoomFancy = MakeFancyFormat(MakeColor(1.00f, 0.89f, 0.41f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 1.00f, 4.71f, 0.20f, 0.00f, 0.00f, 0.00f);
Theme->DirectionFancy = MakeFancyFormat(MakeColor(0.42f, 0.22f, 1.00f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->MiscFancy = MakeFancyFormat(MakeColor(0.00f, 0.00f, 0.00f, 0.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->MoodFancy = MakeFancyFormat(MakeColor(0.00f, 0.00f, 0.00f, 0.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->ResponseFancies[0] = MakeFancyFormat(MakeColor(0.56f, 0.39f, 1.00f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->ResponseFancies[1] = MakeFancyFormat(MakeColor(0.88f, 0.43f, 0.80f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 1.00f, 7.85f, 4.71f, 0.00f, 0.00f, 0.00f);
Theme->DescriptionFancies[0] = Theme->BasicFancy;
Theme->DescriptionFancies[1] = Theme->DirectionFancy;
Theme->DescriptionFancies[2] = Theme->RoomFancy;
Theme->DescriptionFancies[3] = Theme->ItemFancy;
Theme->DescriptionFancies[4] = Theme->MiscFancy;
Theme->DescriptionFancies[5] = Theme->MoodFancy;
}
{
TA->ThemeTable.Keys[1] = MakeTAID(2686502056004);
TA->ThemeTable.Hashes[1] = 2686502056004;
console_theme *Theme = &TA->ThemeTable.Values[1];
Theme->BasicFont = AssetID(font_basic); 
Theme->TitleFont = AssetID(font_basic_bold); 
Theme->BackgroundColor = MakeColor(0.039216f, 0.050980f, 0.290196f, 1.000000f); 
Theme->CursorColor = MakeColor(0.949020f, 0.949020f, 0.949020f, 1.000000f); 
Theme->SelectionColor = MakeColor(0.137255f, 0.172549f, 0.549020f, 1.000000f); 
Theme->BasicFancy = MakeFancyFormat(MakeColor(0.95f, 0.95f, 0.95f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->RoomTitleFancy = MakeFancyFormat(MakeColor(1.00f, 0.41f, 0.41f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 1.00f, 6.28f, 3.14f, 0.00f, 0.00f, 0.00f);
Theme->ItemFancy = MakeFancyFormat(MakeColor(0.14f, 0.89f, 0.89f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->RoomFancy = MakeFancyFormat(MakeColor(1.00f, 0.41f, 0.41f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->DirectionFancy = MakeFancyFormat(MakeColor(0.37f, 0.92f, 0.51f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->MiscFancy = MakeFancyFormat(MakeColor(0.96f, 0.84f, 0.34f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->MoodFancy = MakeFancyFormat(MakeColor(0.35f, 0.67f, 0.54f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->ResponseFancies[0] = MakeFancyFormat(MakeColor(0.56f, 0.39f, 1.00f, 1.00f), MakeColor(0.00f, 0.00f, 0.00f, 0.00f), 0.00f, 0.00f, 0.00f, 0.00f, 0.00f, 0.00f);
Theme->ResponseFancies[1] = MakeFancyFormat(MakeColor(0.90f, 0.31f, 0.80f, 1.00f), MakeColor(0.56f, 0.39f, 1.00f, 1.00f), 0.00f, 0.00f, 0.00f, 3.14f, 0.31f, 0.00f);
Theme->DescriptionFancies[0] = Theme->BasicFancy;
Theme->DescriptionFancies[1] = Theme->DirectionFancy;
Theme->DescriptionFancies[2] = Theme->RoomFancy;
Theme->DescriptionFancies[3] = Theme->ItemFancy;
Theme->DescriptionFancies[4] = Theme->MiscFancy;
Theme->DescriptionFancies[5] = Theme->MoodFancy;
}
TA->RoomTable.BucketsUsed = 42;
{
TA->RoomTable.Keys[0] = MakeTAID(2686502057988);
TA->RoomTable.Hashes[0] = 2686502057988;
ta_room *Room = &TA->RoomTable.Values[0];
Room->NameData.Name = "Tailor shop front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Aliases[0] = "tailor";
Room->NameData.Aliases[1] = "shop";
Room->NameData.Aliases[2] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "tailor";
Room->NameData.Adjectives[1] = "shop";
Room->Area = MakeTAID(2686502057064);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14771636 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14771636);
Assert(14771804 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14771804);
Assert(14771813 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14771813);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502057020);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502059324);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[1] = MakeTAID(2686502057020);
TA->RoomTable.Hashes[1] = 2686502057020;
ta_room *Room = &TA->RoomTable.Values[1];
Room->NameData.Name = "Thorn Lane";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "thorn";
Room->NameData.Aliases[1] = "lane";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "thorn";
Room->Area = MakeTAID(2686502057020);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14771824 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14771824);
Assert(14771843 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14771843);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502056916);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502057032);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502057988);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502057048);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[2] = MakeTAID(2686502059796);
TA->RoomTable.Hashes[2] = 2686502059796;
ta_room *Room = &TA->RoomTable.Values[2];
Room->NameData.Name = "Bell tower belfrey";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "belfrey";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "bell";
Room->NameData.Adjectives[1] = "tower";
Room->Area = MakeTAID(2686502056876);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14771852 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14771852);
Assert(14771861 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14771861);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2686502059824);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2686502059756);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[3] = MakeTAID(2686502056940);
TA->RoomTable.Hashes[3] = 2686502056940;
ta_room *Room = &TA->RoomTable.Values[3];
Room->NameData.Name = "Plant shop";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "shop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "plant";
Room->Area = MakeTAID(2686502056940);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14771870 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14771870);
Assert(14772253 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14772253);
Assert(14772377 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14772377);
Assert(14772432 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14772432);
Room->Items = MakeFullArray<ta_id>(Memory, 8);
Room->Items[0] = MakeTAID(2686502058512);
Room->Items[1] = MakeTAID(2686502058552);
Room->Items[2] = MakeTAID(2686502058604);
Room->Items[3] = MakeTAID(2686502058912);
Room->Items[4] = MakeTAID(2686502058824);
Room->Items[5] = MakeTAID(2686502058884);
Room->Items[6] = MakeTAID(2686502058900);
Room->Items[7] = MakeTAID(2686502058784);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502058948);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502058076);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[4] = MakeTAID(2686502056984);
TA->RoomTable.Hashes[4] = 2686502056984;
ta_room *Room = &TA->RoomTable.Values[4];
Room->NameData.Name = "Northwest plaza";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "plaza";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 4);
Room->NameData.Adjectives[0] = "nw";
Room->NameData.Adjectives[1] = "northwest";
Room->NameData.Adjectives[2] = "north";
Room->NameData.Adjectives[3] = "west";
Room->Area = MakeTAID(2686502056984);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14772443 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14772443);
Assert(14772566 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14772566);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502056048);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502056968);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[5] = MakeTAID(2686502058076);
TA->RoomTable.Hashes[5] = 2686502058076;
ta_room *Room = &TA->RoomTable.Values[5];
Room->NameData.Name = "Plant shop front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "front";
Room->NameData.Aliases[1] = "shop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "plant";
Room->NameData.Adjectives[1] = "shop";
Room->Area = MakeTAID(2686502056940);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14772677 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14772677);
Assert(14773105 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14773105);
Assert(14773201 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14773201);
Room->Items = MakeFullArray<ta_id>(Memory, 3);
Room->Items[0] = MakeTAID(2686502058636);
Room->Items[1] = MakeTAID(2686502058676);
Room->Items[2] = MakeTAID(2686502058712);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502056940);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502056916);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[6] = MakeTAID(2686502059464);
TA->RoomTable.Hashes[6] = 2686502059464;
ta_room *Room = &TA->RoomTable.Values[6];
Room->NameData.Name = "Cathedral organ console";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "console";
Room->NameData.Aliases[1] = "organ";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "organ";
Room->NameData.Adjectives[2] = "church";
Room->Area = MakeTAID(2686502056888);
Room->Tag = MakeAssetTag((asset_tag_id)11, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14773212 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14773212);
Assert(14773406 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14773406);
Assert(14773486 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14773486);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2686502059552);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502059620);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)11, (asset_tag_id)17, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)2686502059424);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502059448);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[7] = MakeTAID(2686502059756);
TA->RoomTable.Hashes[7] = 2686502059756;
ta_room *Room = &TA->RoomTable.Values[7];
Room->NameData.Name = "Bell tower playing room";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "playing";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "bell";
Room->NameData.Adjectives[1] = "tower";
Room->NameData.Adjectives[2] = "playing";
Room->Area = MakeTAID(2686502056876);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14773646 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14773646);
Assert(14773655 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14773655);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2686502059796);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2686502059680);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[8] = MakeTAID(2686502059424);
TA->RoomTable.Hashes[8] = 2686502059424;
ta_room *Room = &TA->RoomTable.Values[8];
Room->NameData.Name = "Cathedral nave";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Aliases[0] = "cathedral";
Room->NameData.Aliases[1] = "church";
Room->NameData.Aliases[2] = "nave";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "church";
Room->Area = MakeTAID(2686502056888);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14773664 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14773664);
Assert(14773931 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14773931);
Assert(14774175 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14774175);
Assert(14774186 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14774186);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502059448);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)2686502059464);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502057780);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502059488);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[9] = MakeTAID(2686502057908);
TA->RoomTable.Hashes[9] = 2686502057908;
ta_room *Room = &TA->RoomTable.Values[9];
Room->NameData.Name = "Bar front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "bar";
Room->NameData.Aliases[1] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "bar";
Room->Area = MakeTAID(2686502056872);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14774197 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14774197);
Assert(14774228 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14774228);
Assert(14774321 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14774321);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502056968);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502057752);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502056872);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502057032);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[10] = MakeTAID(2686502057032);
TA->RoomTable.Hashes[10] = 2686502057032;
ta_room *Room = &TA->RoomTable.Values[10];
Room->NameData.Name = "East Thorn Lane";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "thorn";
Room->NameData.Aliases[1] = "lane";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "e";
Room->NameData.Adjectives[1] = "east";
Room->NameData.Adjectives[2] = "thorn";
Room->Area = MakeTAID(2686502057032);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14774332 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14774332);
Assert(14774356 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14774356);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502057964);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502056968);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502057976);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502057020);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[11] = MakeTAID(2686502058208);
TA->RoomTable.Hashes[11] = 2686502058208;
ta_room *Room = &TA->RoomTable.Values[11];
Room->NameData.Name = "Workshop front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Aliases[0] = "workshop";
Room->NameData.Aliases[1] = "work";
Room->NameData.Aliases[2] = "shop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "work";
Room->Area = MakeTAID(0);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14774417 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14774417);
Assert(14774596 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14774596);
Room->Items = MakeFullArray<ta_id>(Memory, 2);
Room->Items[0] = MakeTAID(2686502058224);
Room->Items[1] = MakeTAID(2686502058284);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502056048);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502058488);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[12] = MakeTAID(2686502056864);
TA->RoomTable.Hashes[12] = 2686502056864;
ta_room *Room = &TA->RoomTable.Values[12];
Room->NameData.Name = "Bakery";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "bakery";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Room->Area = MakeTAID(2686502056864);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14774607 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14774607);
Assert(14774779 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14774779);
Assert(14774898 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14774898);
Assert(14774958 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14774958);
Room->Items = MakeFullArray<ta_id>(Memory, 5);
Room->Items[0] = MakeTAID(2686502057160);
Room->Items[1] = MakeTAID(2686502057220);
Room->Items[2] = MakeTAID(2686502057280);
Room->Items[3] = MakeTAID(2686502057340);
Room->Items[4] = MakeTAID(2686502057400);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502059244);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502057764);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[13] = MakeTAID(2686502059680);
TA->RoomTable.Hashes[13] = 2686502059680;
ta_room *Room = &TA->RoomTable.Values[13];
Room->NameData.Name = "Bell tower programming room";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 5);
Room->NameData.Aliases[0] = "programming";
Room->NameData.Aliases[1] = "room";
Room->NameData.Aliases[2] = "bell";
Room->NameData.Aliases[3] = "tower";
Room->NameData.Aliases[4] = "carillon";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 4);
Room->NameData.Adjectives[0] = "bell";
Room->NameData.Adjectives[1] = "tower";
Room->NameData.Adjectives[2] = "programming";
Room->NameData.Adjectives[3] = "carillon";
Room->Area = MakeTAID(2686502056876);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14774969 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14774969);
Assert(14774978 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14774978);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502059732);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2686502059756);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2686502059488);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[14] = MakeTAID(2686502059220);
TA->RoomTable.Hashes[14] = 2686502059220;
ta_room *Room = &TA->RoomTable.Values[14];
Room->NameData.Name = "Inn room 3";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "3";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "inn";
Room->NameData.Adjectives[1] = "room";
Room->Area = MakeTAID(2686502056936);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14775062 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14775062);
Assert(14775108 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14775108);
Assert(14775117 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14775117);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2686502059108);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502059148);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[15] = MakeTAID(2686502057780);
TA->RoomTable.Hashes[15] = 2686502057780;
ta_room *Room = &TA->RoomTable.Values[15];
Room->NameData.Name = "Cathedral front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Aliases[0] = "cathedral";
Room->NameData.Aliases[1] = "church";
Room->NameData.Aliases[2] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "church";
Room->Area = MakeTAID(2686502056888);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14775128 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14775128);
Assert(14775416 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14775416);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502059424);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502056952);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[16] = MakeTAID(2686502059264);
TA->RoomTable.Hashes[16] = 2686502059264;
ta_room *Room = &TA->RoomTable.Values[16];
Room->NameData.Name = "Bar billiard room";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "billiard";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "bar";
Room->NameData.Adjectives[1] = "billiard";
Room->Area = MakeTAID(2686502056872);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14775522 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14775522);
Assert(14775548 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14775548);
Assert(14775557 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14775557);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2686502056872);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[17] = MakeTAID(2686502057752);
TA->RoomTable.Hashes[17] = 2686502057752;
ta_room *Room = &TA->RoomTable.Values[17];
Room->NameData.Name = "Shop front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "shop";
Room->NameData.Aliases[1] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "shop";
Room->Area = MakeTAID(2686502057012);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14775568 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14775568);
Assert(14775735 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14775735);
Assert(14775902 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14775902);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502056952);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502057764);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502057012);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502057908);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[18] = MakeTAID(2686502056872);
TA->RoomTable.Hashes[18] = 2686502056872;
ta_room *Room = &TA->RoomTable.Values[18];
Room->NameData.Name = "Bar";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "bar";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Room->Area = MakeTAID(2686502056872);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14775913 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14775913);
Assert(14775928 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14775928);
Assert(14776003 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14776003);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502057908);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2686502059264);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2686502059284);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[19] = MakeTAID(2686502057964);
TA->RoomTable.Hashes[19] = 2686502057964;
ta_room *Room = &TA->RoomTable.Values[19];
Room->NameData.Name = "Inn front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "inn";
Room->NameData.Aliases[1] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "inn";
Room->Area = MakeTAID(2686502056936);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14776014 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14776014);
Assert(14776195 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14776195);
Assert(14776204 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14776204);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502059128);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502056968);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502057032);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502057020);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[20] = MakeTAID(2686502056916);
TA->RoomTable.Hashes[20] = 2686502056916;
ta_room *Room = &TA->RoomTable.Values[20];
Room->NameData.Name = "Dark alley";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "alley";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "dark";
Room->Area = MakeTAID(2686502056916);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14776215 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14776215);
Assert(14776494 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14776494);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502058076);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502057020);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[21] = MakeTAID(2686502059180);
TA->RoomTable.Hashes[21] = 2686502059180;
ta_room *Room = &TA->RoomTable.Values[21];
Room->NameData.Name = "Inn room 1";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "1";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "inn";
Room->NameData.Adjectives[1] = "room";
Room->Area = MakeTAID(2686502056936);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14776633 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14776633);
Assert(14776877 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14776877);
Assert(14776886 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14776886);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2686502059076);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502059148);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[22] = MakeTAID(2686502059732);
TA->RoomTable.Hashes[22] = 2686502059732;
ta_room *Room = &TA->RoomTable.Values[22];
Room->NameData.Name = "Bell tower storage room";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "storage";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "bell";
Room->NameData.Adjectives[1] = "tower";
Room->NameData.Adjectives[2] = "storage";
Room->Area = MakeTAID(2686502056876);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14776897 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14776897);
Assert(14776906 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14776906);
Assert(14776996 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14776996);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502059680);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[23] = MakeTAID(2686502056952);
TA->RoomTable.Hashes[23] = 2686502056952;
ta_room *Room = &TA->RoomTable.Values[23];
Room->NameData.Name = "Southeast plaza";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "plaza";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 4);
Room->NameData.Adjectives[0] = "se";
Room->NameData.Adjectives[1] = "southeast";
Room->NameData.Adjectives[2] = "south";
Room->NameData.Adjectives[3] = "east";
Room->Area = MakeTAID(2686502056952);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14777007 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14777007);
Assert(14777202 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14777202);
Room->Items = MakeFullArray<ta_id>(Memory, 2);
Room->Items[0] = MakeTAID(2686502057616);
Room->Items[1] = MakeTAID(2686502057672);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502057780);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502057764);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502057752);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502056968);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[24] = MakeTAID(2686502059524);
TA->RoomTable.Hashes[24] = 2686502059524;
ta_room *Room = &TA->RoomTable.Values[24];
Room->NameData.Name = "Cathedral vestry";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "vestry";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "church";
Room->Area = MakeTAID(2686502056888);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14777397 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14777397);
Assert(14777843 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14777843);
Assert(14777953 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14777953);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2686502055948);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502059448);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[25] = MakeTAID(2686502059128);
TA->RoomTable.Hashes[25] = 2686502059128;
ta_room *Room = &TA->RoomTable.Values[25];
Room->NameData.Name = "Inn lobby";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "inn";
Room->NameData.Aliases[1] = "lobby";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "inn";
Room->Area = MakeTAID(2686502056936);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14777964 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14777964);
Assert(14778224 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14778224);
Assert(14778233 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14778233);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2686502058992);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502057964);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2686502059148);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[26] = MakeTAID(2686502059148);
TA->RoomTable.Hashes[26] = 2686502059148;
ta_room *Room = &TA->RoomTable.Values[26];
Room->NameData.Name = "Inn hallway";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "hallway";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "inn";
Room->Area = MakeTAID(2686502056936);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14778244 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14778244);
Assert(14778335 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14778335);
Assert(14778344 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14778344);
Assert(14778355 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14778355);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2686502059128);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[27] = MakeTAID(2686502057048);
TA->RoomTable.Hashes[27] = 2686502057048;
ta_room *Room = &TA->RoomTable.Values[27];
Room->NameData.Name = "West Thorn Lane";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "thorn";
Room->NameData.Aliases[1] = "lane";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "w";
Room->NameData.Adjectives[1] = "west";
Room->NameData.Adjectives[2] = "thorn";
Room->Area = MakeTAID(2686502057048);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14778366 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14778366);
Assert(14778390 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14778390);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502058012);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502057020);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502058032);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502058052);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[28] = MakeTAID(2686502057764);
TA->RoomTable.Hashes[28] = 2686502057764;
ta_room *Room = &TA->RoomTable.Values[28];
Room->NameData.Name = "Bakery front";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "bakery";
Room->NameData.Aliases[1] = "front";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "bakery";
Room->Area = MakeTAID(2686502056864);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14778399 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14778399);
Assert(14778622 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14778622);
Assert(14778746 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14778746);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502056864);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502056952);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[29] = MakeTAID(2686502059324);
TA->RoomTable.Hashes[29] = 2686502059324;
ta_room *Room = &TA->RoomTable.Values[29];
Room->NameData.Name = "Tailor shop";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "tailor";
Room->NameData.Aliases[1] = "shop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Room->Area = MakeTAID(2686502057064);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14778757 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14778757);
Assert(14779061 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14779061);
Assert(14779070 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14779070);
Assert(14779079 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14779079);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2686502055968);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502057988);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[30] = MakeTAID(2686502056968);
TA->RoomTable.Hashes[30] = 2686502056968;
ta_room *Room = &TA->RoomTable.Values[30];
Room->NameData.Name = "Southwest plaza";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "plaza";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 4);
Room->NameData.Adjectives[0] = "sw";
Room->NameData.Adjectives[1] = "southwest";
Room->NameData.Adjectives[2] = "south";
Room->NameData.Adjectives[3] = "west";
Room->Area = MakeTAID(2686502056968);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14779090 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14779090);
Assert(14779267 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14779267);
Room->Items = MakeFullArray<ta_id>(Memory, 2);
Room->Items[0] = MakeTAID(2686502057796);
Room->Items[1] = MakeTAID(2686502057844);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502056984);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)2686502057896);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502056952);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502057908);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502057032);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[31] = MakeTAID(2686502059488);
TA->RoomTable.Hashes[31] = 2686502059488;
ta_room *Room = &TA->RoomTable.Values[31];
Room->NameData.Name = "Cathedral spiral staircase";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "spiral";
Room->NameData.Aliases[1] = "staircase";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "spiral";
Room->NameData.Adjectives[2] = "church";
Room->Area = MakeTAID(2686502056876);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14779443 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14779443);
Assert(14779706 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14779706);
Assert(14779836 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14779836);
Room->Items = MakeFullArray<ta_id>(Memory, 1);
Room->Items[0] = MakeTAID(2686502057584);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502059424);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2686502059680);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)12, (asset_tag_id)17, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[32] = MakeTAID(2686502059824);
TA->RoomTable.Hashes[32] = 2686502059824;
ta_room *Room = &TA->RoomTable.Values[32];
Room->NameData.Name = "Bell tower lookout";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "lookout";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "bell";
Room->NameData.Adjectives[1] = "tower";
Room->Area = MakeTAID(2686502056876);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14779847 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14779847);
Assert(14780152 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14780152);
Assert(14780163 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14780163);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)2686502059796);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[33] = MakeTAID(2686502057012);
TA->RoomTable.Hashes[33] = 2686502057012;
ta_room *Room = &TA->RoomTable.Values[33];
Room->NameData.Name = "Shop";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "shop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Room->Area = MakeTAID(2686502057012);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14780172 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14780172);
Assert(14780368 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14780368);
Assert(14780455 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14780455);
Assert(14780493 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14780493);
Room->Items = MakeFullArray<ta_id>(Memory, 3);
Room->Items[0] = MakeTAID(2686502055936);
Room->Items[1] = MakeTAID(2686502057092);
Room->Items[2] = MakeTAID(2686502057128);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502057752);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[34] = MakeTAID(2686502056048);
TA->RoomTable.Hashes[34] = 2686502056048;
ta_room *Room = &TA->RoomTable.Values[34];
Room->NameData.Name = "James street";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "james";
Room->NameData.Aliases[1] = "street";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "james";
Room->Area = MakeTAID(0);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14780504 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14780504);
Assert(14780613 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14780613);
Room->Items = MakeFullArray<ta_id>(Memory, 3);
Room->Items[0] = MakeTAID(2686502058124);
Room->Items[1] = MakeTAID(2686502058096);
Room->Items[2] = MakeTAID(2686502058148);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)2686502058188);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502056984);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502058208);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[35] = MakeTAID(2686502059448);
TA->RoomTable.Hashes[35] = 2686502059448;
ta_room *Room = &TA->RoomTable.Values[35];
Room->NameData.Name = "Cathedral altar";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "altar";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "church";
Room->Area = MakeTAID(2686502056888);
Room->Tag = MakeAssetTag((asset_tag_id)14, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14780763 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14780763);
Assert(14780849 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14780849);
Assert(14780996 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14780996);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)2686502059464);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502059424);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502059524);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[36] = MakeTAID(2686502058948);
TA->RoomTable.Hashes[36] = 2686502058948;
ta_room *Room = &TA->RoomTable.Values[36];
Room->NameData.Name = "Plant shop greenhouse";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "greenhouse";
Room->NameData.Aliases[1] = "house";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Room->NameData.Adjectives[0] = "plant";
Room->NameData.Adjectives[1] = "shop";
Room->NameData.Adjectives[2] = "green";
Room->Area = MakeTAID(2686502056940);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14781007 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14781007);
Assert(14781026 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14781026);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502056940);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[37] = MakeTAID(2686502059284);
TA->RoomTable.Hashes[37] = 2686502059284;
ta_room *Room = &TA->RoomTable.Values[37];
Room->NameData.Name = "Bar cellar";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "cellar";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "bar";
Room->Area = MakeTAID(2686502056872);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14781123 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14781123);
Assert(14781216 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14781216);
Assert(14781225 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14781225);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)2686502056872);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[38] = MakeTAID(2686502059620);
TA->RoomTable.Hashes[38] = 2686502059620;
ta_room *Room = &TA->RoomTable.Values[38];
Room->NameData.Name = "Cathedral maintenance room";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "maintenance";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "cathedral";
Room->NameData.Adjectives[1] = "maintenance";
Room->Area = MakeTAID(2686502056888);
Room->Tag = MakeAssetTag((asset_tag_id)11, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14781236 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14781236);
Assert(14781610 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14781610);
Assert(14781641 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14781641);
Assert(14781727 < DataSize);
Room->Datas[3] = (ta_data *)((u8 *)Data+14781727);
Room->Items = MakeFullArray<ta_id>(Memory, 2);
Room->Items[0] = MakeTAID(2686502059356);
Room->Items[1] = MakeTAID(2686502059396);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502059464);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[39] = MakeTAID(2686502058488);
TA->RoomTable.Hashes[39] = 2686502058488;
ta_room *Room = &TA->RoomTable.Values[39];
Room->NameData.Name = "Workshop";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Aliases[0] = "workshop";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Room->Area = MakeTAID(0);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14781738 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14781738);
Assert(14781790 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14781790);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)2686502058208);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[40] = MakeTAID(2686502059204);
TA->RoomTable.Hashes[40] = 2686502059204;
ta_room *Room = &TA->RoomTable.Values[40];
Room->NameData.Name = "Inn room 2";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "2";
Room->NameData.Aliases[1] = "room";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Adjectives[0] = "inn";
Room->NameData.Adjectives[1] = "room";
Room->Area = MakeTAID(2686502056936);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14781801 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14781801);
Assert(14781847 < DataSize);
Room->Datas[1] = (ta_data *)((u8 *)Data+14781847);
Assert(14781856 < DataSize);
Room->Datas[2] = (ta_data *)((u8 *)Data+14781856);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)2686502059148);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
{
TA->RoomTable.Keys[41] = MakeTAID(2686502056852);
TA->RoomTable.Hashes[41] = 2686502056852;
ta_room *Room = &TA->RoomTable.Values[41];
Room->NameData.Name = "Art studio";
Room->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Room->NameData.Aliases[0] = "art";
Room->NameData.Aliases[1] = "studio";
Room->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Room->NameData.Adjectives[0] = "art";
Room->Area = MakeTAID(0);
Room->Tag = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14781867 < DataSize);
Room->Datas[0] = (ta_data *)((u8 *)Data+14781867);
Room->Items = MakeFullArray<ta_id>(Memory, 0);
Room->Adjacents[0] = MakeTAID((u64)0);
Room->AdjacentTags[0] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[1] = MakeTAID((u64)0);
Room->AdjacentTags[1] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[2] = MakeTAID((u64)0);
Room->AdjacentTags[2] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[3] = MakeTAID((u64)0);
Room->AdjacentTags[3] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[4] = MakeTAID((u64)0);
Room->AdjacentTags[4] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[5] = MakeTAID((u64)0);
Room->AdjacentTags[5] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[6] = MakeTAID((u64)0);
Room->AdjacentTags[6] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[7] = MakeTAID((u64)0);
Room->AdjacentTags[7] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[8] = MakeTAID((u64)0);
Room->AdjacentTags[8] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[9] = MakeTAID((u64)0);
Room->AdjacentTags[9] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Room->Adjacents[10] = MakeTAID((u64)0);
Room->AdjacentTags[10] = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
}
TA->ItemNameTable = MakeHashTable<const char *, ta_id>(Memory, ITEM_TABLE_SIZE);
TA->ItemTable.BucketsUsed = 42;
{
HashTableInsert(&TA->ItemNameTable, "lush green plants", MakeTAID(2686502058912));
TA->ItemTable.Keys[0] = MakeTAID(2686502058912);
TA->ItemTable.Hashes[0] = 2686502058912;
ta_item *Item = &TA->ItemTable.Values[0];
Item->NameData.Name = "lush green plants";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "plants";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "lush";
Item->NameData.Adjectives[1] = "green";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14781886 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14781886);
}
{
HashTableInsert(&TA->ItemNameTable, "large loaves of wheat bread", MakeTAID(2686502057400));
TA->ItemTable.Keys[1] = MakeTAID(2686502057400);
TA->ItemTable.Hashes[1] = 2686502057400;
ta_item *Item = &TA->ItemTable.Values[1];
Item->NameData.Name = "large loaves of wheat bread";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Aliases[0] = "bread";
Item->NameData.Aliases[1] = "loaf";
Item->NameData.Aliases[2] = "loafs";
Item->NameData.Aliases[3] = "loaves";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Adjectives[0] = "large";
Item->NameData.Adjectives[1] = "wheat";
Item->NameData.Adjectives[2] = "loaves";
Item->Tag  = MakeAssetTag((asset_tag_id)30, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 4;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14781959 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14781959);
Assert(14782008 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14782008);
Assert(14782169 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14782169);
}
{
HashTableInsert(&TA->ItemNameTable, "Workshop front workers", MakeTAID(2686502058284));
TA->ItemTable.Keys[2] = MakeTAID(2686502058284);
TA->ItemTable.Hashes[2] = 2686502058284;
ta_item *Item = &TA->ItemTable.Values[2];
Item->NameData.Name = "Workshop front workers";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Aliases[0] = "workers";
Item->NameData.Aliases[1] = "men";
Item->NameData.Aliases[2] = "women";
Item->NameData.Aliases[3] = "people";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "muscular";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14782205 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14782205);
}
{
HashTableInsert(&TA->ItemNameTable, "Workshop front doors", MakeTAID(2686502058224));
TA->ItemTable.Keys[3] = MakeTAID(2686502058224);
TA->ItemTable.Hashes[3] = 2686502058224;
ta_item *Item = &TA->ItemTable.Values[3];
Item->NameData.Name = "Workshop front doors";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "doors";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Adjectives[0] = "wide";
Item->NameData.Adjectives[1] = "wooden";
Item->NameData.Adjectives[2] = "weathered";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14782317 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14782317);
}
{
HashTableInsert(&TA->ItemNameTable, "vibrant ceramic plant pot", MakeTAID(2686502058992));
TA->ItemTable.Keys[4] = MakeTAID(2686502058992);
TA->ItemTable.Hashes[4] = 2686502058992;
ta_item *Item = &TA->ItemTable.Values[4];
Item->NameData.Name = "vibrant ceramic plant pot";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "pot";
Item->NameData.Aliases[1] = "pots";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Adjectives[0] = "vibrant";
Item->NameData.Adjectives[1] = "ceramic";
Item->NameData.Adjectives[2] = "plant";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14782386 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14782386);
Assert(14782454 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14782454);
}
{
HashTableInsert(&TA->ItemNameTable, "Southwest plaza bell tower", MakeTAID(2686502057844));
TA->ItemTable.Keys[5] = MakeTAID(2686502057844);
TA->ItemTable.Hashes[5] = 2686502057844;
ta_item *Item = &TA->ItemTable.Values[5];
Item->NameData.Name = "Southwest plaza bell tower";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "bell";
Item->NameData.Aliases[1] = "tower";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "bell";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14782502 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14782502);
}
{
HashTableInsert(&TA->ItemNameTable, "a town map", MakeTAID(2686502055936));
TA->ItemTable.Keys[6] = MakeTAID(2686502055936);
TA->ItemTable.Hashes[6] = 2686502055936;
ta_item *Item = &TA->ItemTable.Values[6];
Item->NameData.Name = "a town map";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "map";
Item->NameData.Aliases[1] = "maps";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "town";
Item->Tag  = MakeAssetTag((asset_tag_id)27, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 5;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14782601 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14782601);
}
{
HashTableInsert(&TA->ItemNameTable, "Southeast plaza oak trees", MakeTAID(2686502057616));
TA->ItemTable.Keys[7] = MakeTAID(2686502057616);
TA->ItemTable.Hashes[7] = 2686502057616;
ta_item *Item = &TA->ItemTable.Values[7];
Item->NameData.Name = "Southeast plaza oak trees";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "trees";
Item->NameData.Aliases[1] = "oak";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Adjectives[0] = "looming";
Item->NameData.Adjectives[1] = "tall";
Item->NameData.Adjectives[2] = "oak";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14782740 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14782740);
}
{
HashTableInsert(&TA->ItemNameTable, "cinnamon sugar churros", MakeTAID(2686502057280));
TA->ItemTable.Keys[8] = MakeTAID(2686502057280);
TA->ItemTable.Hashes[8] = 2686502057280;
ta_item *Item = &TA->ItemTable.Values[8];
Item->NameData.Name = "cinnamon sugar churros";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "churro";
Item->NameData.Aliases[1] = "churros";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "cinnamon";
Item->NameData.Adjectives[1] = "sugar";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 1;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14782870 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14782870);
Assert(14782954 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14782954);
Assert(14782992 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14782992);
}
{
HashTableInsert(&TA->ItemNameTable, "chocolate croissants", MakeTAID(2686502057340));
TA->ItemTable.Keys[9] = MakeTAID(2686502057340);
TA->ItemTable.Hashes[9] = 2686502057340;
ta_item *Item = &TA->ItemTable.Values[9];
Item->NameData.Name = "chocolate croissants";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "croissant";
Item->NameData.Aliases[1] = "croissants";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "chocolate";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 2;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14783023 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14783023);
Assert(14783139 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14783139);
Assert(14783185 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14783185);
}
{
HashTableInsert(&TA->ItemNameTable, "James street cathedral", MakeTAID(2686502058124));
TA->ItemTable.Keys[10] = MakeTAID(2686502058124);
TA->ItemTable.Hashes[10] = 2686502058124;
ta_item *Item = &TA->ItemTable.Values[10];
Item->NameData.Name = "James street cathedral";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "cathedral";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14783214 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14783214);
}
{
HashTableInsert(&TA->ItemNameTable, "organ console static", MakeTAID(2686502059552));
TA->ItemTable.Keys[11] = MakeTAID(2686502059552);
TA->ItemTable.Hashes[11] = 2686502059552;
ta_item *Item = &TA->ItemTable.Values[11];
Item->NameData.Name = "organ console static";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Aliases[0] = "organ";
Item->NameData.Aliases[1] = "organs";
Item->NameData.Aliases[2] = "console";
Item->NameData.Aliases[3] = "consoles";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Adjectives[0] = "organ";
Item->NameData.Adjectives[1] = "once";
Item->NameData.Adjectives[2] = "great";
Item->Tag  = MakeAssetTag((asset_tag_id)11, (asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 6);
Assert(14783357 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14783357);
Assert(14783585 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14783585);
Assert(14783768 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14783768);
Assert(14783853 < DataSize);
Item->Datas[3] = (ta_data *)((u8 *)Data+14783853);
Assert(14783900 < DataSize);
Item->Datas[4] = (ta_data *)((u8 *)Data+14783900);
Assert(14783907 < DataSize);
Item->Datas[5] = (ta_data *)((u8 *)Data+14783907);
}
{
HashTableInsert(&TA->ItemNameTable, "organ pipes", MakeTAID(2686502055984));
TA->ItemTable.Keys[12] = MakeTAID(2686502055984);
TA->ItemTable.Hashes[12] = 2686502055984;
ta_item *Item = &TA->ItemTable.Values[12];
Item->NameData.Name = "organ pipes";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "pipe";
Item->NameData.Aliases[1] = "pipes";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "organ";
Item->Tag  = MakeAssetTag((asset_tag_id)29, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14783914 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14783914);
Assert(14783934 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14783934);
}
{
HashTableInsert(&TA->ItemNameTable, "carrot cake muffins", MakeTAID(2686502057160));
TA->ItemTable.Keys[13] = MakeTAID(2686502057160);
TA->ItemTable.Hashes[13] = 2686502057160;
ta_item *Item = &TA->ItemTable.Values[13];
Item->NameData.Name = "carrot cake muffins";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Aliases[0] = "muffin";
Item->NameData.Aliases[1] = "muffins";
Item->NameData.Aliases[2] = "cake";
Item->NameData.Aliases[3] = "cakes";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "carrot";
Item->NameData.Adjectives[1] = "cake";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 2;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14783957 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14783957);
Assert(14784031 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14784031);
Assert(14784105 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14784105);
}
{
HashTableInsert(&TA->ItemNameTable, "ferns", MakeTAID(2686502058884));
TA->ItemTable.Keys[14] = MakeTAID(2686502058884);
TA->ItemTable.Hashes[14] = 2686502058884;
ta_item *Item = &TA->ItemTable.Values[14];
Item->NameData.Name = "ferns";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "fern";
Item->NameData.Aliases[1] = "ferns";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14784133 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14784133);
}
{
HashTableInsert(&TA->ItemNameTable, "rusty doorknob", MakeTAID(2686502058712));
TA->ItemTable.Keys[15] = MakeTAID(2686502058712);
TA->ItemTable.Hashes[15] = 2686502058712;
ta_item *Item = &TA->ItemTable.Values[15];
Item->NameData.Name = "rusty doorknob";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Aliases[0] = "doorknob";
Item->NameData.Aliases[1] = "doorknobs";
Item->NameData.Aliases[2] = "knob";
Item->NameData.Aliases[3] = "knobs";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "rusty";
Item->NameData.Adjectives[1] = "door";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14784204 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14784204);
}
{
HashTableInsert(&TA->ItemNameTable, "dark rugged door", MakeTAID(2686502058676));
TA->ItemTable.Keys[16] = MakeTAID(2686502058676);
TA->ItemTable.Hashes[16] = 2686502058676;
ta_item *Item = &TA->ItemTable.Values[16];
Item->NameData.Name = "dark rugged door";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "door";
Item->NameData.Aliases[1] = "doors";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "dark";
Item->NameData.Adjectives[1] = "rugged";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14784268 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14784268);
}
{
HashTableInsert(&TA->ItemNameTable, "Workshop front building", MakeTAID(2686502058424));
TA->ItemTable.Keys[17] = MakeTAID(2686502058424);
TA->ItemTable.Hashes[17] = 2686502058424;
ta_item *Item = &TA->ItemTable.Values[17];
Item->NameData.Name = "Workshop front building";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "building";
Item->NameData.Aliases[1] = "workshop";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "workshop";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14784300 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14784300);
}
{
HashTableInsert(&TA->ItemNameTable, "small silver key", MakeTAID(2686502055948));
TA->ItemTable.Keys[18] = MakeTAID(2686502055948);
TA->ItemTable.Hashes[18] = 2686502055948;
ta_item *Item = &TA->ItemTable.Values[18];
Item->NameData.Name = "small silver key";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "key";
Item->NameData.Aliases[1] = "keys";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "small";
Item->NameData.Adjectives[1] = "silver";
Item->Tag  = MakeAssetTag((asset_tag_id)11, (asset_tag_id)26, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14784387 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14784387);
}
{
HashTableInsert(&TA->ItemNameTable, "mess of vines", MakeTAID(2686502058636));
TA->ItemTable.Keys[19] = MakeTAID(2686502058636);
TA->ItemTable.Hashes[19] = 2686502058636;
ta_item *Item = &TA->ItemTable.Values[19];
Item->NameData.Name = "mess of vines";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "vine";
Item->NameData.Aliases[1] = "vines";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "mess";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14784442 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14784442);
}
{
HashTableInsert(&TA->ItemNameTable, "plant pot", MakeTAID(2686502058512));
TA->ItemTable.Keys[20] = MakeTAID(2686502058512);
TA->ItemTable.Hashes[20] = 2686502058512;
ta_item *Item = &TA->ItemTable.Values[20];
Item->NameData.Name = "plant pot";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "pot";
Item->NameData.Aliases[1] = "pots";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "plant";
Item->NameData.Adjectives[1] = "plants";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 3;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14784491 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14784491);
}
{
HashTableInsert(&TA->ItemNameTable, "garden shovel", MakeTAID(2686502058552));
TA->ItemTable.Keys[21] = MakeTAID(2686502058552);
TA->ItemTable.Hashes[21] = 2686502058552;
ta_item *Item = &TA->ItemTable.Values[21];
Item->NameData.Name = "garden shovel";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "shovel";
Item->NameData.Aliases[1] = "shovels";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "garden";
Item->NameData.Adjectives[1] = "gardening";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 5;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14784542 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14784542);
}
{
HashTableInsert(&TA->ItemNameTable, "organ pipes static", MakeTAID(2686502059396));
TA->ItemTable.Keys[22] = MakeTAID(2686502059396);
TA->ItemTable.Hashes[22] = 2686502059396;
ta_item *Item = &TA->ItemTable.Values[22];
Item->NameData.Name = "organ pipes static";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "pipe";
Item->NameData.Aliases[1] = "pipes";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "organ";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)15, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14784620 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14784620);
Assert(14784674 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14784674);
Assert(14784712 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14784712);
Assert(14784719 < DataSize);
Item->Datas[3] = (ta_data *)((u8 *)Data+14784719);
}
{
HashTableInsert(&TA->ItemNameTable, "a lantern", MakeTAID(2686502057128));
TA->ItemTable.Keys[23] = MakeTAID(2686502057128);
TA->ItemTable.Hashes[23] = 2686502057128;
ta_item *Item = &TA->ItemTable.Values[23];
Item->NameData.Name = "a lantern";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "lantern";
Item->NameData.Aliases[1] = "lanterns";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)28, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 10;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14784726 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14784726);
Assert(14784840 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14784840);
Assert(14784915 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14784915);
}
{
HashTableInsert(&TA->ItemNameTable, "Southwest plaza cathedral", MakeTAID(2686502057796));
TA->ItemTable.Keys[24] = MakeTAID(2686502057796);
TA->ItemTable.Hashes[24] = 2686502057796;
ta_item *Item = &TA->ItemTable.Values[24];
Item->NameData.Name = "Southwest plaza cathedral";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "cathedral";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "small";
Item->NameData.Adjectives[1] = "side";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14784933 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14784933);
}
{
HashTableInsert(&TA->ItemNameTable, "Southeast plaza ground", MakeTAID(2686502057672));
TA->ItemTable.Keys[25] = MakeTAID(2686502057672);
TA->ItemTable.Hashes[25] = 2686502057672;
ta_item *Item = &TA->ItemTable.Values[25];
Item->NameData.Name = "Southeast plaza ground";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "ground";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "damp";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14785123 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14785123);
}
{
HashTableInsert(&TA->ItemNameTable, "organ bellows static", MakeTAID(2686502059356));
TA->ItemTable.Keys[26] = MakeTAID(2686502059356);
TA->ItemTable.Hashes[26] = 2686502059356;
ta_item *Item = &TA->ItemTable.Values[26];
Item->NameData.Name = "organ bellows static";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "bellow";
Item->NameData.Aliases[1] = "bellows";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "organ";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)15, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 4);
Assert(14785188 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14785188);
Assert(14785342 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14785342);
Assert(14785381 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14785381);
Assert(14785388 < DataSize);
Item->Datas[3] = (ta_data *)((u8 *)Data+14785388);
}
{
HashTableInsert(&TA->ItemNameTable, "Workshop front ceramic tiles", MakeTAID(2686502058348));
TA->ItemTable.Keys[27] = MakeTAID(2686502058348);
TA->ItemTable.Hashes[27] = 2686502058348;
ta_item *Item = &TA->ItemTable.Values[27];
Item->NameData.Name = "Workshop front ceramic tiles";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "ceramic";
Item->NameData.Aliases[1] = "tiles";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 4);
Item->NameData.Adjectives[0] = "ceramic";
Item->NameData.Adjectives[1] = "blue";
Item->NameData.Adjectives[2] = "glazed";
Item->NameData.Adjectives[3] = "beautiful";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14785395 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14785395);
}
{
HashTableInsert(&TA->ItemNameTable, "an umbrella", MakeTAID(2686502057092));
TA->ItemTable.Keys[28] = MakeTAID(2686502057092);
TA->ItemTable.Hashes[28] = 2686502057092;
ta_item *Item = &TA->ItemTable.Values[28];
Item->NameData.Name = "an umbrella";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "umbrella";
Item->NameData.Aliases[1] = "umbrellas";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 7;
Item->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14785494 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14785494);
Assert(14785547 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14785547);
}
{
HashTableInsert(&TA->ItemNameTable, "room 3 window", MakeTAID(2686502059108));
TA->ItemTable.Keys[29] = MakeTAID(2686502059108);
TA->ItemTable.Hashes[29] = 2686502059108;
ta_item *Item = &TA->ItemTable.Values[29];
Item->NameData.Name = "room 3 window";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "window";
Item->NameData.Aliases[1] = "windows";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14785565 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14785565);
}
{
HashTableInsert(&TA->ItemNameTable, "honeyed almond pastries", MakeTAID(2686502057220));
TA->ItemTable.Keys[30] = MakeTAID(2686502057220);
TA->ItemTable.Hashes[30] = 2686502057220;
ta_item *Item = &TA->ItemTable.Values[30];
Item->NameData.Name = "honeyed almond pastries";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "pastry";
Item->NameData.Aliases[1] = "pastries";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "honeyed";
Item->NameData.Adjectives[1] = "almond";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 3;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14785807 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14785807);
Assert(14785928 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14785928);
Assert(14786038 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14786038);
}
{
HashTableInsert(&TA->ItemNameTable, "calatheas", MakeTAID(2686502058900));
TA->ItemTable.Keys[31] = MakeTAID(2686502058900);
TA->ItemTable.Hashes[31] = 2686502058900;
ta_item *Item = &TA->ItemTable.Values[31];
Item->NameData.Name = "calatheas";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "calatheas";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14786070 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14786070);
}
{
HashTableInsert(&TA->ItemNameTable, "pretty black cat", MakeTAID(2686502059028));
TA->ItemTable.Keys[32] = MakeTAID(2686502059028);
TA->ItemTable.Hashes[32] = 2686502059028;
ta_item *Item = &TA->ItemTable.Values[32];
Item->NameData.Name = "pretty black cat";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "cat";
Item->NameData.Aliases[1] = "cats";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "pretty";
Item->NameData.Adjectives[1] = "black";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14786172 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14786172);
Assert(14786238 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14786238);
}
{
HashTableInsert(&TA->ItemNameTable, "garden gloves", MakeTAID(2686502058604));
TA->ItemTable.Keys[33] = MakeTAID(2686502058604);
TA->ItemTable.Hashes[33] = 2686502058604;
ta_item *Item = &TA->ItemTable.Values[33];
Item->NameData.Name = "garden gloves";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "glove";
Item->NameData.Aliases[1] = "gloves";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "garden";
Item->NameData.Adjectives[1] = "gardening";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 4;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14786286 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14786286);
}
{
HashTableInsert(&TA->ItemNameTable, "bread crumbs", MakeTAID(2686502057476));
TA->ItemTable.Keys[34] = MakeTAID(2686502057476);
TA->ItemTable.Hashes[34] = 2686502057476;
ta_item *Item = &TA->ItemTable.Values[34];
Item->NameData.Name = "bread crumbs";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "crumb";
Item->NameData.Aliases[1] = "crumbs";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "bread";
Item->Tag  = MakeAssetTag((asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 3);
Assert(14786398 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14786398);
Assert(14786457 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14786457);
Assert(14786527 < DataSize);
Item->Datas[2] = (ta_data *)((u8 *)Data+14786527);
}
{
HashTableInsert(&TA->ItemNameTable, "James street bell tower", MakeTAID(2686502058148));
TA->ItemTable.Keys[35] = MakeTAID(2686502058148);
TA->ItemTable.Hashes[35] = 2686502058148;
ta_item *Item = &TA->ItemTable.Values[35];
Item->NameData.Name = "James street bell tower";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "bell";
Item->NameData.Aliases[1] = "tower";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "bell";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14786548 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14786548);
}
{
HashTableInsert(&TA->ItemNameTable, "bell tower key", MakeTAID(2686502057584));
TA->ItemTable.Keys[36] = MakeTAID(2686502057584);
TA->ItemTable.Hashes[36] = 2686502057584;
ta_item *Item = &TA->ItemTable.Values[36];
Item->NameData.Name = "bell tower key";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "key";
Item->NameData.Aliases[1] = "keys";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "bell";
Item->NameData.Adjectives[1] = "tower";
Item->Tag  = MakeAssetTag((asset_tag_id)12, (asset_tag_id)26, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14786629 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14786629);
}
{
HashTableInsert(&TA->ItemNameTable, "James street bushes", MakeTAID(2686502058096));
TA->ItemTable.Keys[37] = MakeTAID(2686502058096);
TA->ItemTable.Hashes[37] = 2686502058096;
ta_item *Item = &TA->ItemTable.Values[37];
Item->NameData.Name = "James street bushes";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Aliases[0] = "bushes";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "large";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14786695 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14786695);
}
{
HashTableInsert(&TA->ItemNameTable, "leather sheet", MakeTAID(2686502055968));
TA->ItemTable.Keys[38] = MakeTAID(2686502055968);
TA->ItemTable.Hashes[38] = 2686502055968;
ta_item *Item = &TA->ItemTable.Values[38];
Item->NameData.Name = "leather sheet";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Aliases[0] = "sheet";
Item->NameData.Aliases[1] = "sheets";
Item->NameData.Aliases[2] = "leather";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "leather";
Item->Tag  = MakeAssetTag((asset_tag_id)29, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 2);
Assert(14786780 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14786780);
Assert(14786862 < DataSize);
Item->Datas[1] = (ta_data *)((u8 *)Data+14786862);
}
{
HashTableInsert(&TA->ItemNameTable, "room 1 window", MakeTAID(2686502059076));
TA->ItemTable.Keys[39] = MakeTAID(2686502059076);
TA->ItemTable.Hashes[39] = 2686502059076;
ta_item *Item = &TA->ItemTable.Values[39];
Item->NameData.Name = "room 1 window";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "window";
Item->NameData.Aliases[1] = "windows";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 0);
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14786887 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14786887);
}
{
HashTableInsert(&TA->ItemNameTable, "silvery scindapsus", MakeTAID(2686502058784));
TA->ItemTable.Keys[40] = MakeTAID(2686502058784);
TA->ItemTable.Hashes[40] = 2686502058784;
ta_item *Item = &TA->ItemTable.Values[40];
Item->NameData.Name = "silvery scindapsus";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Aliases[0] = "scindapsus";
Item->NameData.Aliases[1] = "plant";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 1);
Item->NameData.Adjectives[0] = "silvery";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14787147 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14787147);
}
{
HashTableInsert(&TA->ItemNameTable, "dainty philodendron micans", MakeTAID(2686502058824));
TA->ItemTable.Keys[41] = MakeTAID(2686502058824);
TA->ItemTable.Hashes[41] = 2686502058824;
ta_item *Item = &TA->ItemTable.Values[41];
Item->NameData.Name = "dainty philodendron micans";
Item->NameData.Aliases = MakeFullArray<const char *>(Memory, 3);
Item->NameData.Aliases[0] = "philodendron";
Item->NameData.Aliases[1] = "micans";
Item->NameData.Aliases[2] = "plant";
Item->NameData.Adjectives = MakeFullArray<const char *>(Memory, 2);
Item->NameData.Adjectives[0] = "dainty";
Item->NameData.Adjectives[1] = "philodendron";
Item->Tag  = MakeAssetTag((asset_tag_id)25, (asset_tag_id)0, (asset_tag_id)0, (asset_tag_id)0);
Item->Cost = 0;
Item->Datas = MakeFullArray<ta_data *>(Memory, 1);
Assert(14787218 < DataSize);
Item->Datas[0] = (ta_data *)((u8 *)Data+14787218);
}
{
Assert(14787294 < DataSize);
u8 *Pixels = ((u8 *)Data+14787294);
TA->Map.Texture = MakeTexture();
TextureUpload(TA->Map.Texture, Pixels, 128, 104, 4);
TA->Map.Size = V2(128.000000, 104.000000);
TA->Map.Areas = MakeFullArray<ta_area>(Memory, 19);
TA->Map.Areas[0] = MakeTAArea(MakeTAID((u64)2686502056852), V2(79.000000, 75.000000));
TA->Map.Areas[1] = MakeTAArea(MakeTAID((u64)2686502056864), V2(103.000000, 41.000000));
TA->Map.Areas[2] = MakeTAArea(MakeTAID((u64)2686502056872), V2(83.000000, 31.000000));
TA->Map.Areas[3] = MakeTAArea(MakeTAID((u64)2686502056876), V2(87.000000, 57.000000));
TA->Map.Areas[4] = MakeTAArea(MakeTAID((u64)2686502056888), V2(94.000000, 52.000000));
TA->Map.Areas[5] = MakeTAArea(MakeTAID((u64)2686502056900), V2(45.000000, 21.000000));
TA->Map.Areas[6] = MakeTAArea(MakeTAID((u64)2686502056916), V2(59.000000, 53.000000));
TA->Map.Areas[7] = MakeTAArea(MakeTAID((u64)2686502056928), V2(109.000000, 56.000000));
TA->Map.Areas[8] = MakeTAArea(MakeTAID((u64)2686502056936), V2(71.000000, 44.000000));
TA->Map.Areas[9] = MakeTAArea(MakeTAID((u64)2686502056940), V2(60.000000, 60.000000));
TA->Map.Areas[10] = MakeTAArea(MakeTAID((u64)2686502056952), V2(93.000000, 41.000000));
TA->Map.Areas[11] = MakeTAArea(MakeTAID((u64)2686502056968), V2(83.000000, 43.000000));
TA->Map.Areas[12] = MakeTAArea(MakeTAID((u64)2686502056984), V2(84.000000, 48.000000));
TA->Map.Areas[13] = MakeTAArea(MakeTAID((u64)2686502057000), V2(45.000000, 45.000000));
TA->Map.Areas[14] = MakeTAArea(MakeTAID((u64)2686502057012), V2(93.000000, 31.000000));
TA->Map.Areas[15] = MakeTAArea(MakeTAID((u64)2686502057020), V2(61.000000, 35.000000));
TA->Map.Areas[16] = MakeTAArea(MakeTAID((u64)2686502057032), V2(72.000000, 38.000000));
TA->Map.Areas[17] = MakeTAArea(MakeTAID((u64)2686502057048), V2(47.000000, 36.000000));
TA->Map.Areas[18] = MakeTAArea(MakeTAID((u64)2686502057064), V2(61.000000, 27.000000));
}
}
#endif // GENERATED_ASSET_DATA_H
